var App =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// DOM resources ===================================\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar canvas = document.getElementById(\"canvas\");\nvar ctx = canvas.getContext(\"2d\");\n\nctx.mozImageSmoothingEnabled = false;\nctx.webkitImageSmoothingEnabled = false;\nctx.msImageSmoothingEnabled = false;\nctx.imageSmoothingEnabled = false;\n\nvar bg1 = document.getElementById(\"bg1\");\nvar fg1 = document.getElementById(\"fg1\");\nvar scoreboard = document.getElementById(\"scoreboard\");\nvar messageWindow = document.getElementById(\"message\");\n\nvar flapAudio = document.getElementById(\"flapsound\");\nflapAudio.playbackRate = 4;\nvar crunchAudio = document.getElementById(\"crunchsound\");\nvar crunch2Audio = document.getElementById(\"crunchsound2\");\ncrunch2Audio.playbackRate = 2;\nvar blopAudio = document.getElementById(\"blopsound\");\nblopAudio.playbackRate = 0.5;\nvar screechAudio = document.getElementById(\"screechsound\");\n\n// Audio setup ======================================\n\nvar audioCtx = new (window.AudioContext || new window.webkitAudioContext())();\n\nvar flapSrc = audioCtx.createMediaElementSource(flapAudio);\nflapSrc.connect(audioCtx.destination);\n\nvar crunchSrc = audioCtx.createMediaElementSource(crunchAudio);\ncrunchSrc.connect(audioCtx.destination);\n\nvar crunch2Src = audioCtx.createMediaElementSource(crunch2Audio);\ncrunch2Src.connect(audioCtx.destination);\n\nvar blopSrc = audioCtx.createMediaElementSource(blopAudio);\nblopSrc.connect(audioCtx.destination);\n\nvar screechSrc = audioCtx.createMediaElementSource(screechAudio);\nscreechSrc.connect(audioCtx.destination);\n\nfunction play(audio) {}\n\n// Constants ========================================\n\nvar ANIM_FRAMERATE = 200;\nvar SPRITE_WIDTH = 48;\nvar SPRITE_HEIGHT = 48;\nvar GROUND = 176;\n\n// =================================================\n\n// Globals =========================================\n\nvar fgScrollSpeed = 0.12;\nvar obstacleFrequency = 0.2;\nvar spritesheetSrc = \"assets/spritesheets/sheet00.png\";\nvar sprite = new Image();\nvar loop;\nvar currentScore = 0;\nvar currentTime;\nvar lastTime = 0;\n\n// =================================================\n\n// Base Classes =======================\n\nvar State = function () {\n    function State() {\n        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, State);\n\n        Object.assign(this, args);\n    }\n\n    _createClass(State, [{\n        key: \"enter\",\n        value: function enter() {\n            //Override\n        }\n    }, {\n        key: \"exit\",\n        value: function exit() {\n            //Override\n        }\n    }, {\n        key: \"message\",\n        value: function message(msg) {\n            //Override\n        }\n    }, {\n        key: \"update\",\n        value: function update(deltaTime) {\n            //Override\n        }\n    }]);\n\n    return State;\n}();\n\nvar Control = function () {\n    function Control() {\n        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, Control);\n\n        Object.assign(this, args);\n    }\n\n    _createClass(Control, [{\n        key: \"update\",\n        value: function update(deltaTime) {\n            //Override\n        }\n    }]);\n\n    return Control;\n}();\n\nvar sharedStates = {\n    updateAllControls: new State({\n        update: function update(dt) {\n            for (var controlName in this.controls) {\n                this.controls[controlName].update(dt);\n            }\n        }\n    })\n};\n\nvar GameObject = function () {\n    function GameObject() {\n        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, GameObject);\n\n        this.name = 'GameObject';\n        this.controls = {};\n        this.states = {\n            default: sharedStates.updateAllControls\n        };\n        this.currentState = this.states.default;\n        Object.assign(this, args);\n    }\n\n    _createClass(GameObject, [{\n        key: \"update\",\n        value: function update(dt) {\n            this.currentState.update.call(this, dt);\n        }\n    }, {\n        key: \"message\",\n        value: function message(msg) {\n            this.currentState.message.call(this, msg);\n        }\n    }, {\n        key: \"changeState\",\n        value: function changeState(newState) {\n            this.currentState.exit.call(this, newState);\n            newState.enter.call(this, this.currentState);\n            this.currentState = newState;\n        }\n    }]);\n\n    return GameObject;\n}();\n\n// GAME OBJECT ======================================\n\nvar game = new GameObject({ name: \"Game\" });\n\n// Game object controls =============================\n\ngame.controls.playControl = new Control({\n    components: [],\n    update: function update(dt) {\n        for (var i = 0; i < this.components.length; i++) {\n            this.components[i].update(dt);\n        }\n    }\n});\n\n// =================================================\n\n// Game object states ===========================\n\nvar play = new State({\n    message: function message(msg) {\n        var _this = this;\n\n        switch (msg) {\n            case \"lose\":\n                setTimeout(function () {\n                    _this.changeState(lose);\n                }, 400);\n        }\n    },\n    update: function update(dt) {\n        this.controls.playControl.update(dt);\n    }\n});\n\nvar pause = new State({\n    enter: function enter() {\n        cancelAnimationFrame(loop);\n    }\n});\n\nvar lose = new State({\n    enter: function enter() {\n        cancelAnimationFrame(loop);\n        messageWindow.style.visibility = \"visible\";\n        messageWindow.innerHTML = \"<p style='text-align: center; line-height: 30px'>Final score: \" + Math.floor(currentScore) + \"<br/>SPACE to restart</p>\";\n    }\n\n});\n\n// =================================================\n\nvar GameplayObject = function (_GameObject) {\n    _inherits(GameplayObject, _GameObject);\n\n    function GameplayObject(args) {\n        _classCallCheck(this, GameplayObject);\n\n        var _this2 = _possibleConstructorReturn(this, (GameplayObject.__proto__ || Object.getPrototypeOf(GameplayObject)).call(this, args));\n\n        game.controls.playControl.components.push(_this2);\n        return _this2;\n    }\n\n    return GameplayObject;\n}(GameObject);\n\n// GameplayObject Controls ==============================\n\nvar Sprite = function (_Control) {\n    _inherits(Sprite, _Control);\n\n    function Sprite() {\n        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, Sprite);\n\n        var _this3 = _possibleConstructorReturn(this, (Sprite.__proto__ || Object.getPrototypeOf(Sprite)).call(this, args));\n\n        _this3.engine = gameEnginesObject.spriteEngine;\n        _this3.currentFrameNum = 0;\n        _this3.elapsedTime = 0;\n        _this3.looping = true;\n        _this3.finished = false;\n        _this3.onFinished = function () {};\n        return _this3;\n    }\n\n    _createClass(Sprite, [{\n        key: \"update\",\n        value: function update(dt) {\n            this.advanceFrame(dt);\n        }\n    }, {\n        key: \"advanceFrame\",\n        value: function advanceFrame(dt) {\n            this.elapsedTime += dt;\n            if (this.looping) {\n                this.elapsedTime = this.elapsedTime % (this.numFrames * ANIM_FRAMERATE);\n            } else if (!this.finished) {\n                if (this.elapsedTime >= this.numFrames * ANIM_FRAMERATE) {\n                    this.onFinished();\n                    this.finished = true;\n                }\n            }\n            this.currentFrameNum = Math.floor(this.elapsedTime / ANIM_FRAMERATE);\n            this.currentFrame = this.currentAnimation[this.currentFrameNum];\n        }\n    }, {\n        key: \"setCurrentAnimation\",\n        value: function setCurrentAnimation(name) {\n            var looping = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n            var onFinished = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};\n\n            this.looping = looping;\n            this.finished = false;\n            this.onFinished = onFinished;\n            if (this.currentAnimation != this.animations[name]) {\n                this.currentAnimation = this.animations[name];\n                this.currentFrameNum = 0;\n                this.currentFrame = this.currentAnimation[this.currentFrameNum];\n                this.numFrames = this.currentAnimation.length;\n                this.elapsedTime = 0;\n            }\n        }\n    }]);\n\n    return Sprite;\n}(Control);\n\nvar Collider = function (_Control2) {\n    _inherits(Collider, _Control2);\n\n    function Collider(args) {\n        _classCallCheck(this, Collider);\n\n        var _this4 = _possibleConstructorReturn(this, (Collider.__proto__ || Object.getPrototypeOf(Collider)).call(this, args));\n\n        _this4.hitBox = _this4.hitBox || [20, 30, 33, 48];\n        return _this4;\n    }\n\n    _createClass(Collider, [{\n        key: \"onHit\",\n        value: function onHit(other) {\n            // Override\n        }\n    }]);\n\n    return Collider;\n}(Control);\n\nvar CollisionReceiver = function (_Control3) {\n    _inherits(CollisionReceiver, _Control3);\n\n    function CollisionReceiver(args) {\n        _classCallCheck(this, CollisionReceiver);\n\n        var _this5 = _possibleConstructorReturn(this, (CollisionReceiver.__proto__ || Object.getPrototypeOf(CollisionReceiver)).call(this, args));\n\n        _this5.engine = gameEnginesObject.collisionEngine;\n        return _this5;\n    }\n\n    _createClass(CollisionReceiver, [{\n        key: \"onHit\",\n        value: function onHit(other) {\n            // Override\n        }\n    }]);\n\n    return CollisionReceiver;\n}(Control);\n\nvar Transform = function (_Control4) {\n    _inherits(Transform, _Control4);\n\n    function Transform(args) {\n        _classCallCheck(this, Transform);\n\n        var _this6 = _possibleConstructorReturn(this, (Transform.__proto__ || Object.getPrototypeOf(Transform)).call(this, args));\n\n        _this6.position = _this6.position || [0, GROUND - SPRITE_HEIGHT];\n        _this6.pivot = _this6.pivot || [SPRITE_WIDTH / 2, SPRITE_HEIGHT];\n        _this6.center = _this6.center || [SPRITE_WIDTH / 2, SPRITE_HEIGHT / 2];\n        return _this6;\n    }\n\n    return Transform;\n}(Control);\n\nvar Scroller = function (_Control5) {\n    _inherits(Scroller, _Control5);\n\n    function Scroller(args) {\n        _classCallCheck(this, Scroller);\n\n        var _this7 = _possibleConstructorReturn(this, (Scroller.__proto__ || Object.getPrototypeOf(Scroller)).call(this, args));\n\n        _this7.reset();\n        return _this7;\n    }\n\n    _createClass(Scroller, [{\n        key: \"reset\",\n        value: function reset() {\n            this.xScroll = 0;\n        }\n    }, {\n        key: \"update\",\n        value: function update(dt) {\n            this.xScroll = this.xScroll + fgScrollSpeed * dt;\n            this.owner.controls.transform.position[0] = 320 - this.xScroll;\n        }\n    }]);\n\n    return Scroller;\n}(Control);\n\nvar ObstaclePooler = function (_Control6) {\n    _inherits(ObstaclePooler, _Control6);\n\n    function ObstaclePooler(args) {\n        _classCallCheck(this, ObstaclePooler);\n\n        return _possibleConstructorReturn(this, (ObstaclePooler.__proto__ || Object.getPrototypeOf(ObstaclePooler)).call(this, args));\n    }\n\n    _createClass(ObstaclePooler, [{\n        key: \"activate\",\n        value: function activate() {\n            this.owner.changeState(activeObstacle);\n        }\n    }, {\n        key: \"deactivate\",\n        value: function deactivate() {\n            gameEnginesObject.controls.obstaclePoolEngine.returnToPool(this);\n            this.owner.changeState(inactiveObstacle);\n        }\n    }, {\n        key: \"update\",\n        value: function update(dt) {\n            if (this.owner.controls.transform.position[0] < -SPRITE_WIDTH - 1) {\n                this.deactivate();\n            }\n        }\n    }]);\n\n    return ObstaclePooler;\n}(Control);\n\n// =================================================\n\n// Game Object declarations ========================\n\nvar player = new GameplayObject({ name: \"Player\" });\nvar gameEnginesObject = new GameplayObject({ name: \"GameEnginesObject\" });\nvar fern1 = new GameplayObject({ name: \"Fern1\" });\nvar fern2 = new GameplayObject({ name: \"Fern2\" });\nvar fern3 = new GameplayObject({ name: \"Fern3\" });\nvar fern4 = new GameplayObject({ name: \"Fern4\" });\nvar fern5 = new GameplayObject({ name: \"Fern5\" });\nvar proto1 = new GameplayObject({ name: \"Proto1\" });\nvar proto2 = new GameplayObject({ name: \"Proto2\" });\nvar proto3 = new GameplayObject({ name: \"Proto3\" });\nvar scoreCounter = new GameplayObject({ name: \"Score\" });\nvar message = new GameplayObject({ name: \"MessageWindow\" });\n\n// =================================================\n\n// Score controls ===================================\n\nvar nextScoreMilestone = 50;\n\nscoreCounter.controls.incrementControl = new Control({\n    owner: scoreCounter,\n    increment: function increment(amt) {\n        currentScore += amt;\n        scoreboard.innerHTML = \"SCORE:\\n\" + Math.floor(currentScore);\n        if (currentScore > nextScoreMilestone) {\n            fgScrollSpeed += 0.02;\n            obstacleFrequency = Math.max(obstacleFrequency - 0.02, 0.02);\n            nextScoreMilestone += 50;\n        }\n    }\n});\n\n// =================================================\n\n\n// Player object controls ===========================\n\nplayer.controls.transform = new Transform({\n    owner: player,\n    position: [40, 125]\n});\n\nplayer.controls.sprite = new Sprite({\n    owner: player,\n    animations: {\n        stand: [7],\n        walk: [11, 12],\n        jump: [5],\n        fall: [6],\n        glide: [7, 8],\n        hurt: [9],\n        pounce: [10]\n    }\n});\n\nplayer.controls.collisionReceiver = new CollisionReceiver({\n    owner: player,\n    hitBox: [20, 26, 40, 40],\n    onHit: function onHit(other) {\n        if (other.owner.controls.transform.position[1] > this.owner.controls.transform.position[1]) {\n            this.owner.message(\"pounce\", other);\n        } else {\n            this.owner.message(\"hurt\", other);\n        }\n    }\n});\n\nplayer.controls.altitude = new Control({\n    owner: player,\n    yAccel: 0,\n    gliding: false,\n    startJump: function startJump() {\n        this.yAccel -= 9;\n        this.gliding = true;\n    },\n    bounce: function bounce() {\n        this.yAccel = -9;\n        this.gliding = false;\n    },\n    flap: function flap() {\n        this.yAccel -= 4;\n        this.gliding = true;\n        this.owner.controls.sprite.setCurrentAnimation(\"jump\");\n        flapAudio.play();\n    },\n    fall: function fall() {\n        this.gliding = false;\n        this.owner.controls.sprite.setCurrentAnimation(\"fall\");\n    },\n    move: function move(dt) {\n        this.yAccel = Math.max(this.yAccel, -9);\n        this.owner.controls.transform.position[1] += this.yAccel * (dt / 30);\n        if (this.gliding && this.yAccel > 0) {\n            this.owner.controls.sprite.setCurrentAnimation(\"glide\");\n            this.yAccel = dt / 30;\n        } else {\n            this.yAccel += 0.75 * (dt / 30);\n        }\n        if (this.owner.controls.transform.position[1] >= GROUND - SPRITE_HEIGHT) {\n            this.owner.controls.sprite.setCurrentAnimation(\"hurt\");\n            this.yAccel = 1.5;\n            blopAudio.play();\n            game.message(\"lose\");\n        }\n    }\n});\n\n// =================================================\n\n// Player object states =========================\n\nvar walk = new State({\n    enter: function enter() {\n        this.controls.sprite.setCurrentAnimation(\"walk\");\n    },\n    message: function message(msg) {\n        switch (msg) {\n            case \"jump\":\n                this.changeState(jump);\n                break;\n            case \"hurt\":\n                this.changeState(hurt);\n                break;\n        }\n    },\n    update: function update(dt) {\n        this.controls.sprite.update(dt);\n    }\n});\n\nvar jump = new State({\n    enter: function enter() {\n        this.controls.sprite.setCurrentAnimation(\"jump\");\n        this.controls.altitude.startJump();\n    },\n    message: function message(msg, e) {\n        switch (msg) {\n            case \"jump\":\n                this.controls.altitude.flap();\n                break;\n            case \"fall\":\n                this.controls.altitude.fall();\n                break;\n            case \"hurt\":\n                this.changeState(hurt);\n                break;\n            case \"pounce\":\n                this.controls.sprite.setCurrentAnimation(\"pounce\");\n                this.controls.altitude.bounce();\n        }\n    },\n    update: function update(dt) {\n        this.controls.altitude.move(dt);\n        this.controls.sprite.update(dt);\n    }\n});\n\nvar hurt = new State({\n    enter: function enter() {\n        screechAudio.play();\n        this.controls.altitude.bounce();\n        this.controls.sprite.setCurrentAnimation(\"hurt\");\n        game.message(\"lose\");\n    },\n    message: function message(msg) {},\n    update: function update(dt) {\n        this.controls.altitude.move(dt);\n        this.controls.sprite.update(dt);\n    }\n});\n\n// =================================================\n\n// Fern controls ====================================\n\n// TODO: Make Fern class\n\nfunction fernOnHit() {\n    if (player.currentState == jump && player.controls.transform.position[1] < this.owner.controls.transform.position[1]) {\n        this.owner.changeState(deadEnemy);\n        crunch2Audio.play();\n    }\n}\n\nfern1.controls.sprite = new Sprite({\n    owner: fern1,\n    animations: {\n        default: [1],\n        dead: [0]\n    }\n});\nfern1.controls.collider = new Collider({ owner: fern1, onHit: fernOnHit });\nfern1.controls.transform = new Transform({ owner: fern1 });\nfern1.controls.scroller = new Scroller({ owner: fern1 });\nfern1.controls.obstaclePooler = new ObstaclePooler({ owner: fern1 });\n\nfern2.controls.sprite = new Sprite({\n    owner: fern2,\n    animations: {\n        default: [1],\n        dead: [0]\n    }\n});\nfern2.controls.collider = new Collider({ owner: fern2, onHit: fernOnHit });\nfern2.controls.transform = new Transform({ owner: fern2 });\nfern2.controls.scroller = new Scroller({ owner: fern2 });\nfern2.controls.obstaclePooler = new ObstaclePooler({ owner: fern2 });\n\nfern3.controls.sprite = new Sprite({\n    owner: fern3,\n    animations: {\n        default: [1],\n        dead: [0]\n    }\n});\nfern3.controls.collider = new Collider({ owner: fern3, onHit: fernOnHit });\nfern3.controls.transform = new Transform({ owner: fern3 });\nfern3.controls.scroller = new Scroller({ owner: fern3 });\nfern3.controls.obstaclePooler = new ObstaclePooler({ owner: fern3 });\n\nfern4.controls.sprite = new Sprite({\n    owner: fern4,\n    animations: {\n        default: [1],\n        dead: [0]\n    }\n});\nfern4.controls.collider = new Collider({ owner: fern4, onHit: fernOnHit });\nfern4.controls.transform = new Transform({ owner: fern4 });\nfern4.controls.scroller = new Scroller({ owner: fern4 });\nfern4.controls.obstaclePooler = new ObstaclePooler({ owner: fern4 });\n\nfern5.controls.sprite = new Sprite({\n    owner: fern5,\n    animations: {\n        default: [1],\n        dead: [0]\n    }\n});\nfern5.controls.collider = new Collider({ owner: fern5, onHit: fernOnHit });\nfern5.controls.transform = new Transform({ owner: fern5 });\nfern5.controls.scroller = new Scroller({ owner: fern5 });\nfern5.controls.obstaclePooler = new ObstaclePooler({ owner: fern5 });\n\n// =================================================\n\n// Proto controls ===================================\n\n// TODO: Make protoceratops class\n\nfunction protoOnHit() {\n    if (player.currentState == jump && player.controls.transform.position[1] < this.owner.controls.transform.position[1]) {\n        this.owner.changeState(deadEnemy);\n        crunchAudio.play();\n    }\n}\n\nproto1.controls.sprite = new Sprite({\n    owner: proto1,\n    animations: {\n        default: [4],\n        dead: [2, 3]\n    }\n});\nproto1.controls.collider = new Collider({\n    owner: proto1,\n    hitbox: [3, 31, 31, 48],\n    onHit: protoOnHit\n});\nproto1.controls.transform = new Transform({ owner: proto1 });\nproto1.controls.scroller = new Scroller({ owner: proto1 });\nproto1.controls.obstaclePooler = new ObstaclePooler({ owner: proto1 });\n\nproto2.controls.sprite = new Sprite({\n    owner: proto2,\n    animations: {\n        default: [4],\n        dead: [2, 3]\n    }\n});\nproto2.controls.collider = new Collider({\n    owner: proto2,\n    hitbox: [3, 31, 31, 48],\n    onHit: protoOnHit\n});\nproto2.controls.transform = new Transform({ owner: proto2 });\nproto2.controls.scroller = new Scroller({ owner: proto2 });\nproto2.controls.obstaclePooler = new ObstaclePooler({ owner: proto2 });\n\nproto3.controls.sprite = new Sprite({\n    owner: proto3,\n    animations: {\n        default: [4],\n        dead: [2, 3]\n    }\n});\nproto3.controls.collider = new Collider({\n    owner: proto3,\n    hitbox: [3, 31, 31, 48],\n    onHit: protoOnHit\n});\nproto3.controls.transform = new Transform({ owner: proto3 });\nproto3.controls.scroller = new Scroller({ owner: proto3 });\nproto3.controls.obstaclePooler = new ObstaclePooler({ owner: proto3 });\n\n// =================================================\n\n// Fern states ==================================\n\nvar activeObstacle = new State({\n    enter: function enter() {\n        this.controls.sprite.setCurrentAnimation(\"default\");\n        this.controls.scroller.reset();\n    },\n    update: function update(dt) {\n        this.controls.scroller.update(dt);\n        this.controls.obstaclePooler.update(dt);\n    }\n});\n\nvar inactiveObstacle = new State({\n    enter: function enter() {\n        this.controls.transform.position = [-SPRITE_WIDTH, GROUND - SPRITE_HEIGHT];\n        gameEnginesObject.controls.obstaclePoolEngine.returnToPool();\n    }\n});\n\nvar deadEnemy = new State({\n    enter: function enter() {\n        this.controls.sprite.setCurrentAnimation(\"dead\", false);\n        scoreCounter.controls.incrementControl.increment(10);\n    },\n    update: function update(dt) {\n        this.controls.scroller.update(dt);\n        this.controls.obstaclePooler.update(dt);\n        this.controls.sprite.update(dt);\n    }\n});\n// =================================================\n\n// Game engine controls =============================\n\n// TODO: Optimize\ngameEnginesObject.controls.obstaclePoolEngine = new Control({\n    owner: gameEnginesObject,\n    nextObjectPlacementTime: 0,\n    activeComponents: [],\n    inactiveComponents: [fern1.controls.obstaclePooler, fern2.controls.obstaclePooler, fern3.controls.obstaclePooler, fern4.controls.obstaclePooler, fern5.controls.obstaclePooler, proto1.controls.obstaclePooler, proto2.controls.obstaclePooler, proto3.controls.obstaclePooler],\n    returnToPool: function returnToPool(obj) {\n        this.activeComponents.splice(this.activeComponents.indexOf(obj), 1);\n        this.inactiveComponents.push(obj);\n    },\n    update: function update(dt) {\n        if (currentTime >= this.nextObjectPlacementTime) {\n            var rand = Math.random();\n            if (rand < obstacleFrequency) {\n                var r = Math.floor(Math.random() * (this.inactiveComponents.length - 1));\n                var obj = this.inactiveComponents.splice(r, 1)[0];\n                if (obj) {\n                    this.activeComponents.push(obj);\n                    obj.activate();\n                    this.nextObjectPlacementTime = currentTime + 300;\n                }\n            }\n        }\n    }\n});\n\ngameEnginesObject.controls.spriteEngine = new Control({\n    owner: gameEnginesObject,\n    components: [player.controls.sprite, fern1.controls.sprite, fern2.controls.sprite, fern3.controls.sprite, fern4.controls.sprite, fern5.controls.sprite, proto1.controls.sprite, proto2.controls.sprite, proto3.controls.sprite],\n    update: function update(dt) {\n        ctx.clearRect(0, 0, 320, 240);\n        for (var i = 0; i < this.components.length; i++) {\n            var position = this.components[i].owner.controls.transform.position;\n            var frame = this.components[i].currentFrame;\n            ctx.drawImage(sprite, frame * SPRITE_WIDTH, 0, SPRITE_WIDTH, SPRITE_HEIGHT, position[0], position[1], SPRITE_WIDTH, SPRITE_HEIGHT);\n        }\n    }\n});\n\nfunction isColliding(a, b) {\n\n    // If a is above b\n    if (a[3] < b[1]) {\n        return false;\n    }\n\n    // If a is below b\n    if (a[1] > b[3]) {\n        return false;\n    }\n\n    // If a is left of b\n    if (a[2] < b[0]) {\n        return false;\n    }\n\n    // If a is right of b\n    if (a[0] > b[2]) {\n        return false;\n    }\n\n    // Else collision\n    return true;\n}\n\ngameEnginesObject.controls.collisionEngine = new Control({\n    owner: gameEnginesObject,\n    playerCollider: player.controls.collisionReceiver,\n    components: [fern1.controls.collider, fern2.controls.collider, fern3.controls.collider, fern4.controls.collider, fern5.controls.collider, proto1.controls.collider, proto2.controls.collider, proto3.controls.collider],\n    update: function update(dt) {\n        var playerBox;\n        var otherBox;\n        var playerPos;\n        var otherPos;\n        var playerBound = [];\n        var otherBound = [];\n        for (var i = 0; i < this.components.length; i++) {\n            playerBox = this.playerCollider.hitBox;\n            playerPos = this.playerCollider.owner.controls.transform.position;\n            playerBound[0] = playerBox[0] + playerPos[0];\n            playerBound[2] = playerBox[2] + playerPos[0];\n            playerBound[1] = playerBox[1] + playerPos[1];\n            playerBound[3] = playerBox[3] + playerPos[1];\n\n            otherBox = this.components[i].hitBox;\n            otherPos = this.components[i].owner.controls.transform.position;\n            otherBound[0] = otherBox[0] + otherPos[0];\n            otherBound[2] = otherBox[2] + otherPos[0];\n            otherBound[1] = otherBox[1] + otherPos[1];\n            otherBound[3] = otherBox[3] + otherPos[1];\n\n            if (isColliding(playerBound, otherBound)) {\n                player.controls.collisionReceiver.onHit(this.components[i]);\n                this.components[i].onHit();\n            }\n        }\n    }\n});\n\n// =================================================\n\n// State assignments ============================\n\ngame.changeState(play);\nplayer.changeState(jump);\nplayer.controls.altitude.gliding = false;\nfern1.changeState(inactiveObstacle);\nfern2.changeState(inactiveObstacle);\nfern3.changeState(inactiveObstacle);\nfern4.changeState(inactiveObstacle);\nfern5.changeState(inactiveObstacle);\nproto1.changeState(inactiveObstacle);\nproto2.changeState(inactiveObstacle);\nproto3.changeState(inactiveObstacle);\n// scoreCounter.changeState(countUp)\n\n// =================================================\n\n\n// Key listeners ===================================\n\nvar keyDown = false;\n\ndocument.addEventListener(\"keydown\", function (e) {\n    if (keyDown == false && e.keyCode == 32) {\n        if (game.currentState == lose) {\n            restart();\n        } else {\n            player.message(\"jump\");\n            keyDown = true;\n        }\n    }\n});\n\ndocument.addEventListener(\"keyup\", function (e) {\n    if (keyDown == true && e.keyCode == 32) {\n        player.message(\"fall\");\n        keyDown = false;\n    }\n});\n\ndocument.addEventListener(\"touchstart\", function (e) {\n    if (keyDown == false) {\n        if (game.currentState == lose) {\n            restart();\n        } else {\n            player.message(\"jump\");\n            keyDown = true;\n        }\n    }\n});\n\ndocument.addEventListener(\"touchend\", function (e) {\n    if (keyDown == true) {\n        player.message(\"fall\");\n        keyDown = false;\n    }\n});\n\n// =================================================\n\n// Game loop =======================================\n\nvar bgX = 0;\nvar fgX = 0;\n\nfunction tick(timestamp) {\n    loop = requestAnimationFrame(tick);\n    if (!lastTime) {\n        lastTime = timestamp;\n    }\n    var dt = timestamp - lastTime;\n    currentTime = timestamp;\n    game.update(dt);\n    lastTime = timestamp;\n    bgX = (bgX - 3 * (dt / 30)) % 640;\n    bg1.style.backgroundPosition = bgX + \"px 0px\";\n    fgX = (fgX - fgScrollSpeed * dt * 2) % 640;\n    fg1.style.backgroundPosition = fgX + \"px 0px\";\n}\n\nfunction restart() {\n    lastTime = null;\n    currentScore = 0;\n    obstacleFrequency = 0.2;\n    fgScrollSpeed = 0.12;\n    nextScoreMilestone = 50;\n    scoreboard.innerHTML = \"SCORE: \" + Math.floor(currentScore);\n    player.controls.transform.position = [40, 125];\n    game.changeState(play);\n    player.changeState(jump);\n    player.controls.altitude.gliding = false;\n    // fern1.changeState(inactiveObstacle)\n    // fern2.changeState(inactiveObstacle)\n    // fern3.changeState(inactiveObstacle)\n    // fern4.changeState(inactiveObstacle)\n    // fern5.changeState(inactiveObstacle)\n    // proto1.changeState(inactiveObstacle)\n    // proto2.changeState(inactiveObstacle)\n    // proto3.changeState(inactiveObstacle)\n    messageWindow.style.visibility = \"hidden\";\n    game.changeState(play);\n    loop = requestAnimationFrame(tick);\n}\n\n// =================================================\n\n// Start ============================================\n\nsprite.onload = function () {\n    loop = requestAnimationFrame(tick);\n};\nsprite.src = spritesheetSrc;\n\n// =================================================\n\n// Export module ===================================\n\nmodule.exports = { GameObject: GameObject };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n");

/***/ })
/******/ ]);