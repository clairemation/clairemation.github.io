var $ =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.l = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };

/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};

/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};

/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 4);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar END_TAG = '$';\n\nvar Stack = __webpack_require__(3),\n    sin = Math.sin,\n    cos = Math.cos,\n    vectorInstance = new Vector(),\n    values = new Stack(),\n    sizeStack = new Stack();\n\nsizeStack.push(0);\nvar size = 0;\n\nfunction Vector() {};\n\nvar $ = function $(v) {\n  values.push(v);\n  // sizeStack.push(v.length);\n  // size = sizeStack.peek();\n  return vectorInstance;\n};\n\nObject.defineProperty(Vector.prototype, END_TAG, {\n  get: function get() {\n    // sizeStack.pop();\n    // size = sizeStack.peek();\n    return values.pop();\n  }\n});\n\n// Functions\n\nVector.prototype.plus = function (x) {\n  if (Array.isArray(x)) {\n    return this.plusVector(x);\n  } else {\n    return this.plusScalar(x);\n  }\n};\n\nVector.prototype.plusScalar = function (s) {\n  var v = values.pop();\n  var size = v.length;\n\n  // Selects appropriate version for vector/matrix size--no logic branching, no loops, lazily evaluated, for optimal(?) performance\n  var functionVersion = {\n    2: function _() {\n      return [v[0] + s, v[1] + s];\n    },\n    3: function _() {\n      return [v[0] + s, v[1] + s, v[2] + s];\n    },\n    4: function _() {\n      return [v[0] + s, v[1] + s, v[2] + s, v[3] + s];\n    }\n  };\n  values.push(functionVersion[size]());\n  return this;\n};\n\nVector.prototype.plusVector = function (v) {\n  var u = values.pop();\n  var size = u.length;\n  var functionVersion = {\n    2: function _() {\n      return [u[0] + v[0], u[1] + v[1]];\n    },\n    3: function _() {\n      return [u[0] + v[0], u[1] + v[1], u[2] + v[2]];\n    },\n    4: function _() {\n      return [u[0] + v[0], u[1] + v[1], u[2] + v[2], u[3] + v[3]];\n    }\n  };\n  values.push(functionVersion[size]());\n  return this;\n};\n\nVector.prototype.minusVector = function (v) {\n  var u = values.pop();\n  var size = u.length;\n  var functionVersion = {\n    2: function _() {\n      return [u[0] - v[0], u[1] - v[1]];\n    },\n    3: function _() {\n      return [u[0] - v[0], u[1] - v[1], u[2] - v[2]];\n    },\n    4: function _() {\n      return [u[0] - v[0], u[1] - v[1], u[2] - v[2], u[3] - v[3]];\n    }\n  };\n  values.push(functionVersion[size]());\n  return this;\n};\n\nVector.prototype.timesScalar = function (s) {\n  var v = values.pop();\n  var size = v.length;\n  var functionVersion = {\n    2: function _() {\n      return [v[0] * s, v[1] * s];\n    },\n    3: function _() {\n      return [v[0] * s, v[1] * s, v[2] * s];\n    },\n    4: function _() {\n      return [v[0] * s, v[1] * s, v[2] * s, v[3] * s];\n    }\n  };\n  values.push(functionVersion[size]());\n  return this;\n};\n\nVector.prototype.timesVector = function (v) {\n  var u = values.pop();\n  var size = u.length;\n  var functionVersion = {\n    2: function _() {\n      return [u[0] * v[0], u[1] * v[1]];\n    },\n    3: function _() {\n      return [u[0] * v[0], u[1] * v[1], u[2] * v[2]];\n    },\n    4: function _() {\n      return [u[0] * v[0], u[1] * v[1], u[2] * v[2], u[3] * v[3]];\n    }\n\n  }[v.length];\n  values.push(functionVersion[size]());\n  return this;\n};\n\nVector.prototype.timesMatrix = function (m) {\n  var v = values.pop();\n  var size = v.length;\n  var functionVersion = {\n    3: function _() {\n      return [m[0] * v[0] + m[1] * v[1] + m[2] * v[2], m[3] * v[0] + m[4] * v[1] + m[5] * v[2], m[6] * v[0] + m[7] * v[1] + m[8] * v[2]];\n    },\n    4: function _() {\n      return [m[0] * v[0] + m[1] * v[1] + m[2] * v[2] + m[3] * v[3], m[4] * v[0] + m[5] * v[1] + m[6] * v[2] + m[7] * v[3], m[8] * v[0] + m[9] * v[1] + m[10] * v[2] + m[11] * v[3], m[12] * v[0] + m[13] * v[1] + m[14] * v[2] + m[15] * v[3]];\n    },\n    16: function _() {\n      return [m[0] * v[0] + m[1] * v[4] + m[2] * v[8] + m[3] * v[12], m[0] * v[1] + m[1] * v[5] + m[2] * v[9] + m[3] * v[13], m[0] * v[2] + m[1] * v[6] + m[2] * v[10] + m[3] * v[14], m[0] * v[3] + m[1] * v[7] + m[2] * v[11] + m[3] * v[15], m[4] * v[0] + m[5] * v[4] + m[6] * v[8] + m[7] * v[12], m[4] * v[1] + m[5] * v[5] + m[6] * v[9] + m[7] * v[13], m[4] * v[2] + m[5] * v[6] + m[6] * v[10] + m[7] * v[14], m[4] * v[3] + m[5] * v[7] + m[6] * v[11] + m[7] * v[15], m[8] * v[0] + m[9] * v[4] + m[10] * v[8] + m[11] * v[12], m[8] * v[1] + m[9] * v[5] + m[10] * v[9] + m[11] * v[13], m[8] * v[2] + m[9] * v[6] + m[10] * v[10] + m[11] * v[14], m[8] * v[3] + m[9] * v[7] + m[10] * v[11] + m[11] * v[15], m[12] * v[0] + m[13] * v[4] + m[14] * v[8] + m[15] * v[12], m[12] * v[1] + m[13] * v[5] + m[14] * v[9] + m[15] * v[13], m[12] * v[2] + m[13] * v[6] + m[14] * v[10] + m[15] * v[14], m[12] * v[3] + m[13] * v[7] + m[14] * v[11] + m[15] * v[15]];\n    }\n  };\n  values.push(functionVersion[size]());\n  return this;\n};\n\nVector.prototype.times = function () {\n  for (var _len = arguments.length, x = Array(_len), _key = 0; _key < _len; _key++) {\n    x[_key] = arguments[_key];\n  }\n\n  if (x.length === 1) {\n    return this.timesScalar(x);\n  } else if (x.length === 16) {\n    return this.timesMatrix.apply(this, x);\n  } else {\n    return this.timesVector.apply(this, x);\n  }\n};\n\nVector.prototype.divideByScalar = function (s) {\n  var v = values.pop();\n  var size = v.length;\n  var functionVersion = {\n    2: function _() {\n      return [v[0] / s, v[1] / s];\n    },\n    3: function _() {\n      return [v[0] / s, v[1] / s, v[2] / s];\n    },\n    4: function _() {\n      return [v[0] / s, v[1] / s, v[2] / s, v[3] / s];\n    }\n  };\n  values.push(functionVersion[size]());\n  return this;\n};\n\nVector.prototype.divideByVector = function (v) {\n  var u = values.pop();\n  var size = u.length;\n  var functionVersion = {\n    2: function _() {\n      return [u[0] / v[0], u[1] / v[1]];\n    },\n    3: function _() {\n      return [u[0] / v[0], u[1] / v[1], u[2] / v[2]];\n    },\n    4: function _() {\n      return [u[0] / v[0], u[1] / v[1], u[2] / v[2], u[3] / v[3]];\n    }\n  };\n  values.push(functionVersion[size]());\n  return this;\n};\n\nVector.prototype.divideBy = function (x) {\n  if (Array.isArray(x)) {\n    return this.divideByVector(x);\n  } else {\n    return this.divideByScalar(x);\n  }\n};\n\nVector.prototype.dot = function (v) {\n  var u = values.pop();\n  var size = u.length;\n  var functionVersion = {\n    2: function _() {\n      return u[0] * v[0] + u[1] * v[1];\n    },\n    3: function _() {\n      return u[0] * v[0] + u[1] * v[1] + u[2] * v[2];\n    },\n    4: function _() {\n      return u[0] * v[0] + u[1] * v[1] + u[2] * v[2] + u[3] * v[3];\n    }\n  };\n  values.push(functionVersion[size]());\n  return this;\n};\n\nVector.prototype.mix = function (v) {\n  var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.5;\n\n  values.push(this.timesScalar(1 - t).plusVector($(v).timesScalar(t)[END_TAG])[END_TAG]);\n  return this;\n};\n\nVector.prototype.squaredLength = function () {\n  values.push(this.dot(values.peek())[END_TAG]);\n  return this;\n};\n\nVector.prototype.length = function () {\n  values.push(Math.sqrt(this.squaredLength()[END_TAG]));\n  return this;\n};\n\nVector.prototype.distanceTo = function (b) {\n  var a = values.pop();\n  var vec = $(b).minusVector(a).$;\n  values.push($(vec).length().$);\n  return this;\n};\n\nVector.prototype.squaredDistanceTo = function (b) {\n  var a = values.pop();\n  var vec = $(b).minusVector(a).$;\n  values.push($(vec).squaredLength().$);\n  return this;\n};\n\nVector.prototype.nearest = function (a, b) {\n  var v = values.pop();\n  var distA = $(v).squaredDistanceTo(a).$;\n  var distB = $(v).squaredDistanceTo(b).$;\n  values.push(distA < distB ? a : b);\n  return this;\n};\n\nVector.prototype.isLeftOf = function (r) {\n  var v = values.pop();\n  values.push((v[1] - r[1]) * (r[2] - r[0]) > (v[0] - r[0]) * (r[3] - r[2]));\n  return this;\n};\n\nVector.prototype.unit = function () {\n  var value = values.peek();\n  if (value[0] === 0 && value[1] === 0 && value[2] === 0) {\n    values.pop();\n    values.push([0, 0, 0]);\n  } else {\n    values.push(this.divideByScalar($(values.peek()).length()[END_TAG])[END_TAG]);\n  }\n  return this;\n};\n\nVector.prototype.turnLeft = function () {\n  var v = values.pop();\n  values.push([-v[1], v[0]]);\n  return this;\n};\n\nVector.prototype.turnRight = function () {\n  var v = values.pop();\n  values.push([v[1], -v[0]]);\n  return this;\n};\n\nVector.prototype.leftNormal = function () {\n  var v = values.pop();\n  values.push($(v).unit().turnLeft()[END_TAG]);\n  return this;\n};\n\nVector.prototype.rightNormal = function () {\n  var v = values.pop();\n  values.push($(v).unit().turnRight()[END_TAG]);\n  return this;\n};\n\nVector.prototype.rotate2d = function (angle) {\n  var v = values.pop();\n  var size = v.length;\n  v[0] = v[0] * cos(angle) - v[1] * sin(angle);\n  v[1] = v[0] * sin(angle) + v[1] * cos(angle);\n  values.push(v);\n  return this;\n};\n\nVector.prototype.angle2d = function () {\n  var v = values.pop();\n  var size = v.length;\n  values.push(Math.atan2(v[1], v[0]));\n  return this;\n};\n\nVector.prototype.directionTo = function (v) {\n  var u = values.pop();\n  var size = u.length;\n  values.push(this.minusVector(u).unit()[END_TAG]);\n  return this;\n};\n\nVector.prototype.projectedLength = function (v) {\n  values.push(Math.sqrt(Math.abs(this.dot(v)[END_TAG])));\n  return this;\n};\n\n// Todo: Add versions for other size matrices\nVector.prototype.transpose = function () {\n  var v = values.pop();\n  var size = v.length;\n  values.push([v[0], v[4], v[8], v[12], v[1], v[5], v[9], v[13], v[2], v[6], v[10], v[14], v[3], v[7], v[11], v[15]]);\n  return this;\n};\n\nVector.prototype.rotate = function (_ref) {\n  var _ref2 = _slicedToArray(_ref, 3),\n      x = _ref2[0],\n      y = _ref2[1],\n      z = _ref2[2];\n\n  var v = values.pop();\n  var size = v.length;\n  if (size === 2) {\n    values.push(this.rotate2d(x)[END_TAG]);\n    return this;\n  }\n  var xRotation = [1, 0, 0, 0, 0, cos(x), -sin(x), 0, 0, sin(x), cos(x), 0, 0, 0, 0, 1],\n      yRotation = [cos(y), 0, sin(y), 0, 0, 1, 0, 0, -sin(y), 0, cos(y), 0, 0, 0, 0, 1],\n      zRotation = [cos(z), -sin(z), 0, 0, sin(z), cos(z), 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n  values.push($(v).timesMatrix(xRotation).timesMatrix(yRotation).timesMatrix(zRotation)[END_TAG]);\n  return this;\n};\n\nVector.prototype.cross = function (b) {\n  var a = values.pop();\n  var size = a.length;\n  values.push([a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]]);\n  return this;\n};\n\nVector.prototype.coordPairToVector = function () {\n  var coords = values.pop();\n  values.push($([coords[2], coords[3]]).minusVector([coords[0], coords[1]]).$);\n  return this;\n};\n\nVector.prototype.angleTo = function (b) {\n  var a = values.pop();\n  values.push(Math.acos($(a).dot(b).$));\n  return this;\n};\n\nVector.prototype.rotateToPlane = function (planeNormal) {\n  var myAxis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 1, 0];\n\n  var v = values.pop();\n  var rotationMatrix = [];\n  if (planeNormal[0] != 0 || planeNormal[1] != 0 || planeNormal[2] != 0) {\n    var angle = Math.acos($(myAxis).dot(planeNormal).$),\n        axis = $(myAxis).cross(planeNormal).unit().$,\n        c = cos(angle),\n        t = 1 - c,\n        s = sin(angle),\n        _axis = _slicedToArray(axis, 3),\n        x = _axis[0],\n        y = _axis[1],\n        z = _axis[2],\n        tX = t * x,\n        tY = t * y,\n        tZ = t * z,\n        tXY = tX * y,\n        tYX = tXY,\n        tXX = tX * x,\n        tYZ = tY * z,\n        tZY = tYZ,\n        tYY = tY * y,\n        tXZ = tX * z,\n        tZX = tXZ,\n        tZZ = tZ * z,\n        xS = x * s,\n        yS = y * s,\n        zS = z * s,\n        rotationMatrix = [tXX + c, tYX - zS, tZX + yS, tXY + zS, tYY + c, tZY - xS, tXZ + yS, tYZ + xS, tZZ + c];\n  } else {\n    rotationMatrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n  }\n  values.push($(v).timesMatrix(rotationMatrix).$);\n  return this;\n};\n\nVector.prototype.inverse = function () {\n  var r = Vector.IDENTITY_MATRIX,\n      m = values.pop();\n  var size = m.length;\n\n  r[0] = m[5] * m[10] * m[15] - m[5] * m[14] * m[11] - m[6] * m[9] * m[15] + m[6] * m[13] * m[11] + m[7] * m[9] * m[14] - m[7] * m[13] * m[10];\n  r[1] = -m[1] * m[10] * m[15] + m[1] * m[14] * m[11] + m[2] * m[9] * m[15] - m[2] * m[13] * m[11] - m[3] * m[9] * m[14] + m[3] * m[13] * m[10];\n  r[2] = m[1] * m[6] * m[15] - m[1] * m[14] * m[7] - m[2] * m[5] * m[15] + m[2] * m[13] * m[7] + m[3] * m[5] * m[14] - m[3] * m[13] * m[6];\n  r[3] = -m[1] * m[6] * m[11] + m[1] * m[10] * m[7] + m[2] * m[5] * m[11] - m[2] * m[9] * m[7] - m[3] * m[5] * m[10] + m[3] * m[9] * m[6];\n\n  r[4] = -m[4] * m[10] * m[15] + m[4] * m[14] * m[11] + m[6] * m[8] * m[15] - m[6] * m[12] * m[11] - m[7] * m[8] * m[14] + m[7] * m[12] * m[10];\n  r[5] = m[0] * m[10] * m[15] - m[0] * m[14] * m[11] - m[2] * m[8] * m[15] + m[2] * m[12] * m[11] + m[3] * m[8] * m[14] - m[3] * m[12] * m[10];\n  r[6] = -m[0] * m[6] * m[15] + m[0] * m[14] * m[7] + m[2] * m[4] * m[15] - m[2] * m[12] * m[7] - m[3] * m[4] * m[14] + m[3] * m[12] * m[6];\n  r[7] = m[0] * m[6] * m[11] - m[0] * m[10] * m[7] - m[2] * m[4] * m[11] + m[2] * m[8] * m[7] + m[3] * m[4] * m[10] - m[3] * m[8] * m[6];\n\n  r[8] = m[4] * m[9] * m[15] - m[4] * m[13] * m[11] - m[5] * m[8] * m[15] + m[5] * m[12] * m[11] + m[7] * m[8] * m[13] - m[7] * m[12] * m[9];\n  r[9] = -m[0] * m[9] * m[15] + m[0] * m[13] * m[11] + m[1] * m[8] * m[15] - m[1] * m[12] * m[11] - m[3] * m[8] * m[13] + m[3] * m[12] * m[9];\n  r[10] = m[0] * m[5] * m[15] - m[0] * m[13] * m[7] - m[1] * m[4] * m[15] + m[1] * m[12] * m[7] + m[3] * m[4] * m[13] - m[3] * m[12] * m[5];\n  r[11] = -m[0] * m[5] * m[11] + m[0] * m[9] * m[7] + m[1] * m[4] * m[11] - m[1] * m[8] * m[7] - m[3] * m[4] * m[9] + m[3] * m[8] * m[5];\n\n  r[12] = -m[4] * m[9] * m[14] + m[4] * m[13] * m[10] + m[5] * m[8] * m[14] - m[5] * m[12] * m[10] - m[6] * m[8] * m[13] + m[6] * m[12] * m[9];\n  r[13] = m[0] * m[9] * m[14] - m[0] * m[13] * m[10] - m[1] * m[8] * m[14] + m[1] * m[12] * m[10] + m[2] * m[8] * m[13] - m[2] * m[12] * m[9];\n  r[14] = -m[0] * m[5] * m[14] + m[0] * m[13] * m[6] + m[1] * m[4] * m[14] - m[1] * m[12] * m[6] - m[2] * m[4] * m[13] + m[2] * m[12] * m[5];\n  r[15] = m[0] * m[5] * m[10] - m[0] * m[9] * m[6] - m[1] * m[4] * m[10] + m[1] * m[8] * m[6] + m[2] * m[4] * m[9] - m[2] * m[8] * m[5];\n\n  // In case of divide by zero error, if det is 0 just leave unchanged\n  var det = m[0] * r[0] + m[1] * r[4] + m[2] * r[8] + m[3] * r[12] || 1;\n  for (var i = 0; i < 16; i++) {\n    r[i] /= det;\n  }values.push(r);\n  return this;\n};\n\nmodule.exports = $;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar $ = __webpack_require__(0);\n\nfunction extractNormals(_ref) {\n  var image = _ref.image,\n      normals = _ref.normals,\n      _ref$alphas = _ref.alphas,\n      alphas = _ref$alphas === undefined ? [] : _ref$alphas,\n      _ref$startx = _ref.startx,\n      startx = _ref$startx === undefined ? 0 : _ref$startx,\n      _ref$starty = _ref.starty,\n      starty = _ref$starty === undefined ? 0 : _ref$starty,\n      _ref$sourceWidth = _ref.sourceWidth,\n      sourceWidth = _ref$sourceWidth === undefined ? 512 : _ref$sourceWidth,\n      _ref$sourceHeight = _ref.sourceHeight,\n      sourceHeight = _ref$sourceHeight === undefined ? 512 : _ref$sourceHeight;\n\n  return new Promise(function (resolve, reject) {\n    var data = function getImageData() {\n      var tempCanvas = document.createElement('canvas');\n      tempCanvas.width = sourceWidth;\n      tempCanvas.height = sourceHeight;\n      var tempCtx = tempCanvas.getContext('2d');\n      tempCtx.drawImage(image, startx, starty, sourceWidth, sourceHeight, 0, 0, sourceWidth, sourceHeight);\n      return tempCtx.getImageData(0, 0, sourceWidth, sourceHeight).data;\n    }();\n    for (var i = 0; i < data.length; i += 4) {\n      var normal = $([data[i], data[i + 1], data[i + 2]]).divideBy(256).times(2).plus(-1).unit().$;\n      normals.push(normal);\n      alphas.push(data[i + 3]);\n    }\n    resolve({ normals: normals, alphas: alphas });\n  });\n}\n\nmodule.exports = extractNormals;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvbGliL2V4dHJhY3Qtbm9ybWFscy5qcz80NjMzIl0sIm5hbWVzIjpbIiQiLCJyZXF1aXJlIiwiZXh0cmFjdE5vcm1hbHMiLCJpbWFnZSIsIm5vcm1hbHMiLCJhbHBoYXMiLCJzdGFydHgiLCJzdGFydHkiLCJzb3VyY2VXaWR0aCIsInNvdXJjZUhlaWdodCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZGF0YSIsImdldEltYWdlRGF0YSIsInRlbXBDYW52YXMiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ3aWR0aCIsImhlaWdodCIsInRlbXBDdHgiLCJnZXRDb250ZXh0IiwiZHJhd0ltYWdlIiwiaSIsImxlbmd0aCIsIm5vcm1hbCIsImRpdmlkZUJ5IiwidGltZXMiLCJwbHVzIiwidW5pdCIsInB1c2giLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQU1BLElBQUksbUJBQUFDLENBQVEsQ0FBUixDQUFWOztBQUVBLFNBQVNDLGNBQVQsT0FBcUg7QUFBQSxNQUE1RkMsS0FBNEYsUUFBNUZBLEtBQTRGO0FBQUEsTUFBckZDLE9BQXFGLFFBQXJGQSxPQUFxRjtBQUFBLHlCQUE1RUMsTUFBNEU7QUFBQSxNQUE1RUEsTUFBNEUsK0JBQW5FLEVBQW1FO0FBQUEseUJBQS9EQyxNQUErRDtBQUFBLE1BQS9EQSxNQUErRCwrQkFBdEQsQ0FBc0Q7QUFBQSx5QkFBbkRDLE1BQW1EO0FBQUEsTUFBbkRBLE1BQW1ELCtCQUExQyxDQUEwQztBQUFBLDhCQUF2Q0MsV0FBdUM7QUFBQSxNQUF2Q0EsV0FBdUMsb0NBQXpCLEdBQXlCO0FBQUEsK0JBQXBCQyxZQUFvQjtBQUFBLE1BQXBCQSxZQUFvQixxQ0FBTCxHQUFLOztBQUNuSCxTQUFPLElBQUlDLE9BQUosQ0FBWSxVQUFDQyxPQUFELEVBQVVDLE1BQVYsRUFBcUI7QUFDdEMsUUFBSUMsT0FBTyxTQUFTQyxZQUFULEdBQXVCO0FBQ2hDLFVBQUlDLGFBQWFDLFNBQVNDLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBakI7QUFDQUYsaUJBQVdHLEtBQVgsR0FBbUJWLFdBQW5CO0FBQ0FPLGlCQUFXSSxNQUFYLEdBQW9CVixZQUFwQjtBQUNBLFVBQUlXLFVBQVVMLFdBQVdNLFVBQVgsQ0FBc0IsSUFBdEIsQ0FBZDtBQUNBRCxjQUFRRSxTQUFSLENBQWtCbkIsS0FBbEIsRUFBeUJHLE1BQXpCLEVBQWlDQyxNQUFqQyxFQUF5Q0MsV0FBekMsRUFBc0RDLFlBQXRELEVBQW9FLENBQXBFLEVBQXVFLENBQXZFLEVBQTBFRCxXQUExRSxFQUF1RkMsWUFBdkY7QUFDQSxhQUFPVyxRQUFRTixZQUFSLENBQXFCLENBQXJCLEVBQXdCLENBQXhCLEVBQTJCTixXQUEzQixFQUF3Q0MsWUFBeEMsRUFBc0RJLElBQTdEO0FBQ0QsS0FQVSxFQUFYO0FBUUEsU0FBSyxJQUFJVSxJQUFJLENBQWIsRUFBZ0JBLElBQUlWLEtBQUtXLE1BQXpCLEVBQWlDRCxLQUFHLENBQXBDLEVBQXNDO0FBQ3BDLFVBQUlFLFNBQVN6QixFQUFFLENBQUNhLEtBQUtVLENBQUwsQ0FBRCxFQUFVVixLQUFLVSxJQUFFLENBQVAsQ0FBVixFQUFxQlYsS0FBS1UsSUFBRSxDQUFQLENBQXJCLENBQUYsRUFBbUNHLFFBQW5DLENBQTRDLEdBQTVDLEVBQWlEQyxLQUFqRCxDQUF1RCxDQUF2RCxFQUEwREMsSUFBMUQsQ0FBK0QsQ0FBQyxDQUFoRSxFQUFtRUMsSUFBbkUsR0FBMEU3QixDQUF2RjtBQUNBSSxjQUFRMEIsSUFBUixDQUFhTCxNQUFiO0FBQ0FwQixhQUFPeUIsSUFBUCxDQUFZakIsS0FBS1UsSUFBRSxDQUFQLENBQVo7QUFDRDtBQUNEWixZQUFRLEVBQUNQLGdCQUFELEVBQVVDLGNBQVYsRUFBUjtBQUNELEdBZk0sQ0FBUDtBQWdCRDs7QUFFRDBCLE9BQU9DLE9BQVAsR0FBaUI5QixjQUFqQiIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgJCA9IHJlcXVpcmUoJ2xpYi9jb29sZ2VicmEnKTtcblxuZnVuY3Rpb24gZXh0cmFjdE5vcm1hbHMoe2ltYWdlLCBub3JtYWxzLCBhbHBoYXMgPSBbXSwgc3RhcnR4ID0gMCwgc3RhcnR5ID0gMCwgc291cmNlV2lkdGggPSA1MTIsIHNvdXJjZUhlaWdodCA9IDUxMn0pe1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHZhciBkYXRhID0gZnVuY3Rpb24gZ2V0SW1hZ2VEYXRhKCl7XG4gICAgICB2YXIgdGVtcENhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgICAgdGVtcENhbnZhcy53aWR0aCA9IHNvdXJjZVdpZHRoO1xuICAgICAgdGVtcENhbnZhcy5oZWlnaHQgPSBzb3VyY2VIZWlnaHQ7XG4gICAgICB2YXIgdGVtcEN0eCA9IHRlbXBDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgIHRlbXBDdHguZHJhd0ltYWdlKGltYWdlLCBzdGFydHgsIHN0YXJ0eSwgc291cmNlV2lkdGgsIHNvdXJjZUhlaWdodCwgMCwgMCwgc291cmNlV2lkdGgsIHNvdXJjZUhlaWdodCk7XG4gICAgICByZXR1cm4gdGVtcEN0eC5nZXRJbWFnZURhdGEoMCwgMCwgc291cmNlV2lkdGgsIHNvdXJjZUhlaWdodCkuZGF0YTtcbiAgICB9KCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSs9NCl7XG4gICAgICBsZXQgbm9ybWFsID0gJChbZGF0YVtpXSwgZGF0YVtpKzFdLCBkYXRhW2krMl1dKS5kaXZpZGVCeSgyNTYpLnRpbWVzKDIpLnBsdXMoLTEpLnVuaXQoKS4kO1xuICAgICAgbm9ybWFscy5wdXNoKG5vcm1hbCk7XG4gICAgICBhbHBoYXMucHVzaChkYXRhW2krM10pO1xuICAgIH1cbiAgICByZXNvbHZlKHtub3JtYWxzLCBhbHBoYXN9KTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXh0cmFjdE5vcm1hbHM7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL2xpYi9leHRyYWN0LW5vcm1hbHMuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction intersection(x1, y1, x2, y2, u1, v1, u2, v2) {\n\n  // x and y are used for line 1, u and v for line 2\n  // input x1,y1 input x2,y2 input u1,v1 input u2,v2\n\n\n  var b1 = (y2 - y1) / (x2 - x1);\n  var b2 = (v2 - v1) / (u2 - u1);\n\n  var a1 = y1 - b1 * x1;\n  var a2 = v1 - b2 * u1;\n\n  var xi = -(a1 - a2) / (b1 - b2);\n  var yi = a1 + b1 * xi;\n\n  if ((x1 - xi) * (xi - x2) >= 0 && (u1 - xi) * (xi - u2) >= 0 && (y1 - yi) * (yi - y2) >= 0 && (v1 - yi) * (yi - v2) >= 0) {\n    return [xi, yi];\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = intersection;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvbGliL2ludGVyc2VjdGlvbi5qcz9lODM4Il0sIm5hbWVzIjpbImludGVyc2VjdGlvbiIsIngxIiwieTEiLCJ4MiIsInkyIiwidTEiLCJ2MSIsInUyIiwidjIiLCJiMSIsImIyIiwiYTEiLCJhMiIsInhpIiwieWkiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLFNBQVNBLFlBQVQsQ0FBc0JDLEVBQXRCLEVBQTBCQyxFQUExQixFQUE4QkMsRUFBOUIsRUFBa0NDLEVBQWxDLEVBQXNDQyxFQUF0QyxFQUEwQ0MsRUFBMUMsRUFBOENDLEVBQTlDLEVBQWtEQyxFQUFsRCxFQUFxRDs7QUFFbkQ7QUFDQTs7O0FBR0EsTUFBSUMsS0FBSyxDQUFDTCxLQUFHRixFQUFKLEtBQVNDLEtBQUdGLEVBQVosQ0FBVDtBQUNBLE1BQUlTLEtBQUssQ0FBQ0YsS0FBR0YsRUFBSixLQUFTQyxLQUFHRixFQUFaLENBQVQ7O0FBRUEsTUFBSU0sS0FBS1QsS0FBR08sS0FBR1IsRUFBZjtBQUNBLE1BQUlXLEtBQUtOLEtBQUdJLEtBQUdMLEVBQWY7O0FBRUEsTUFBSVEsS0FBSyxFQUFHRixLQUFHQyxFQUFOLEtBQVdILEtBQUdDLEVBQWQsQ0FBVDtBQUNBLE1BQUlJLEtBQUtILEtBQUdGLEtBQUdJLEVBQWY7O0FBRUEsTUFBSSxDQUFDWixLQUFHWSxFQUFKLEtBQVNBLEtBQUdWLEVBQVosS0FBaUIsQ0FBakIsSUFBc0IsQ0FBQ0UsS0FBR1EsRUFBSixLQUFTQSxLQUFHTixFQUFaLEtBQWlCLENBQXZDLElBQTRDLENBQUNMLEtBQUdZLEVBQUosS0FBU0EsS0FBR1YsRUFBWixLQUFpQixDQUE3RCxJQUFrRSxDQUFDRSxLQUFHUSxFQUFKLEtBQVNBLEtBQUdOLEVBQVosS0FBaUIsQ0FBdkYsRUFBeUY7QUFDdkYsV0FBTyxDQUFDSyxFQUFELEVBQUtDLEVBQUwsQ0FBUDtBQUNELEdBRkQsTUFHSztBQUNILFdBQU8sS0FBUDtBQUNEO0FBQ0Y7O0FBRURDLE9BQU9DLE9BQVAsR0FBaUJoQixZQUFqQiIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaW50ZXJzZWN0aW9uKHgxLCB5MSwgeDIsIHkyLCB1MSwgdjEsIHUyLCB2Mil7XG5cbiAgLy8geCBhbmQgeSBhcmUgdXNlZCBmb3IgbGluZSAxLCB1IGFuZCB2IGZvciBsaW5lIDJcbiAgLy8gaW5wdXQgeDEseTEgaW5wdXQgeDIseTIgaW5wdXQgdTEsdjEgaW5wdXQgdTIsdjJcblxuXG4gIHZhciBiMSA9ICh5Mi15MSkvKHgyLXgxKTtcbiAgdmFyIGIyID0gKHYyLXYxKS8odTItdTEpO1xuXG4gIHZhciBhMSA9IHkxLWIxKngxO1xuICB2YXIgYTIgPSB2MS1iMip1MTtcblxuICB2YXIgeGkgPSAtIChhMS1hMikvKGIxLWIyKTtcbiAgdmFyIHlpID0gYTErYjEqeGk7XG5cbiAgaWYgKCh4MS14aSkqKHhpLXgyKT49MCAmJiAodTEteGkpKih4aS11Mik+PTAgJiYgKHkxLXlpKSooeWkteTIpPj0wICYmICh2MS15aSkqKHlpLXYyKT49MCl7XG4gICAgcmV0dXJuIFt4aSwgeWldO1xuICB9XG4gIGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGludGVyc2VjdGlvbjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvbGliL2ludGVyc2VjdGlvbi5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction SimpleStack() {\n  this.top = null;\n}\n\nSimpleStack.prototype.push = function (value) {\n  this.top = { value: value, below: this.top };\n};\n\nSimpleStack.prototype.pop = function () {\n  var node = this.top;\n  this.top = this.top.below;\n  return node.value;\n};\n\nSimpleStack.prototype.peek = function () {\n  return this.top.value;\n};\n\nSimpleStack.prototype.fill = function (a) {\n  for (var i = 0; i < a.length; i++) {\n    this.push(a[i]);\n  }\n};\n\nSimpleStack.prototype.fillWithValues = function (va) {\n  for (var i = 0; i < a.length; i++) {\n    this.pushValue(va[i]);\n  }\n};\n\nSimpleStack.prototype.toArr = function () {\n  var arr = [];\n  var currentNode = this.top;\n  while (currentNode != null) {\n    arr.push(currentNode);\n    currentNode = currentNode.below;\n  }\n  return arr;\n};\n\nmodule.exports = SimpleStack;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvbGliL3N0YWNrLmpzP2NmNTAiXSwibmFtZXMiOlsiU2ltcGxlU3RhY2siLCJ0b3AiLCJwcm90b3R5cGUiLCJwdXNoIiwidmFsdWUiLCJiZWxvdyIsInBvcCIsIm5vZGUiLCJwZWVrIiwiZmlsbCIsImEiLCJpIiwibGVuZ3RoIiwiZmlsbFdpdGhWYWx1ZXMiLCJ2YSIsInB1c2hWYWx1ZSIsInRvQXJyIiwiYXJyIiwiY3VycmVudE5vZGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLFNBQVNBLFdBQVQsR0FBc0I7QUFDcEIsT0FBS0MsR0FBTCxHQUFXLElBQVg7QUFDRDs7QUFFREQsWUFBWUUsU0FBWixDQUFzQkMsSUFBdEIsR0FBNkIsVUFBU0MsS0FBVCxFQUFlO0FBQzFDLE9BQUtILEdBQUwsR0FBVyxFQUFDRyxZQUFELEVBQVFDLE9BQU8sS0FBS0osR0FBcEIsRUFBWDtBQUNELENBRkQ7O0FBSUFELFlBQVlFLFNBQVosQ0FBc0JJLEdBQXRCLEdBQTRCLFlBQVU7QUFDcEMsTUFBSUMsT0FBTyxLQUFLTixHQUFoQjtBQUNBLE9BQUtBLEdBQUwsR0FBVyxLQUFLQSxHQUFMLENBQVNJLEtBQXBCO0FBQ0EsU0FBT0UsS0FBS0gsS0FBWjtBQUNELENBSkQ7O0FBTUFKLFlBQVlFLFNBQVosQ0FBc0JNLElBQXRCLEdBQTZCLFlBQVU7QUFDckMsU0FBTyxLQUFLUCxHQUFMLENBQVNHLEtBQWhCO0FBQ0QsQ0FGRDs7QUFJQUosWUFBWUUsU0FBWixDQUFzQk8sSUFBdEIsR0FBNkIsVUFBU0MsQ0FBVCxFQUFXO0FBQ3RDLE9BQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJRCxFQUFFRSxNQUF0QixFQUE4QkQsR0FBOUIsRUFBa0M7QUFDaEMsU0FBS1IsSUFBTCxDQUFVTyxFQUFFQyxDQUFGLENBQVY7QUFDRDtBQUNGLENBSkQ7O0FBTUFYLFlBQVlFLFNBQVosQ0FBc0JXLGNBQXRCLEdBQXVDLFVBQVNDLEVBQVQsRUFBWTtBQUNqRCxPQUFLLElBQUlILElBQUksQ0FBYixFQUFnQkEsSUFBSUQsRUFBRUUsTUFBdEIsRUFBOEJELEdBQTlCLEVBQWtDO0FBQ2hDLFNBQUtJLFNBQUwsQ0FBZUQsR0FBR0gsQ0FBSCxDQUFmO0FBQ0Q7QUFDRixDQUpEOztBQU1BWCxZQUFZRSxTQUFaLENBQXNCYyxLQUF0QixHQUE4QixZQUFVO0FBQ3RDLE1BQUlDLE1BQU0sRUFBVjtBQUNBLE1BQUlDLGNBQWMsS0FBS2pCLEdBQXZCO0FBQ0EsU0FBT2lCLGVBQWUsSUFBdEIsRUFBMkI7QUFDekJELFFBQUlkLElBQUosQ0FBU2UsV0FBVDtBQUNBQSxrQkFBY0EsWUFBWWIsS0FBMUI7QUFDRDtBQUNELFNBQU9ZLEdBQVA7QUFDRCxDQVJEOztBQVVBRSxPQUFPQyxPQUFQLEdBQWlCcEIsV0FBakIiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIFNpbXBsZVN0YWNrKCl7XG4gIHRoaXMudG9wID0gbnVsbDtcbn1cblxuU2ltcGxlU3RhY2sucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbih2YWx1ZSl7XG4gIHRoaXMudG9wID0ge3ZhbHVlLCBiZWxvdzogdGhpcy50b3B9O1xufVxuXG5TaW1wbGVTdGFjay5wcm90b3R5cGUucG9wID0gZnVuY3Rpb24oKXtcbiAgdmFyIG5vZGUgPSB0aGlzLnRvcDtcbiAgdGhpcy50b3AgPSB0aGlzLnRvcC5iZWxvdztcbiAgcmV0dXJuIG5vZGUudmFsdWU7XG59XG5cblNpbXBsZVN0YWNrLnByb3RvdHlwZS5wZWVrID0gZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHRoaXMudG9wLnZhbHVlO1xufVxuXG5TaW1wbGVTdGFjay5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uKGEpe1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspe1xuICAgIHRoaXMucHVzaChhW2ldKTtcbiAgfVxufVxuXG5TaW1wbGVTdGFjay5wcm90b3R5cGUuZmlsbFdpdGhWYWx1ZXMgPSBmdW5jdGlvbih2YSl7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKyl7XG4gICAgdGhpcy5wdXNoVmFsdWUodmFbaV0pO1xuICB9XG59XG5cblNpbXBsZVN0YWNrLnByb3RvdHlwZS50b0FyciA9IGZ1bmN0aW9uKCl7XG4gIHZhciBhcnIgPSBbXTtcbiAgdmFyIGN1cnJlbnROb2RlID0gdGhpcy50b3A7XG4gIHdoaWxlIChjdXJyZW50Tm9kZSAhPSBudWxsKXtcbiAgICBhcnIucHVzaChjdXJyZW50Tm9kZSk7XG4gICAgY3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZS5iZWxvdztcbiAgfVxuICByZXR1cm4gYXJyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNpbXBsZVN0YWNrO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9saWIvc3RhY2suanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar processNormalsImage = __webpack_require__(1),\n    $ = __webpack_require__(0),\n    intersects = __webpack_require__(2),\n    DISTANCE_THRESHOLD = 5,\n    SPACEBAR = 32,\n    LEFT_KEY = 37,\n    UP_KEY = 38,\n    RIGHT_KEY = 39,\n    DOWN_KEY = 40,\n    WIN_WIDTH = 512,\n    WIN_HEIGHT = 512,\n    TILE_WIDTH = 32,\n    TILE_HEIGHT = 32,\n    PERSPECTIVE = $([0, 1, -1]).unit().$,\n    cos = Math.cos,\n    sin = Math.sin,\n    root = document.getElementById('root'),\n    ball = document.getElementById('ball'),\n    wrapper = document.getElementById('wrapper');\n\n\nvar image = new Image(WIN_WIDTH, WIN_HEIGHT),\n    normals = [],\n    depths = [],\n    loop = null,\n    ballImpulse = [0, 0, 0],\n    ballY = 256,\n    ballX = 256,\n    ballZ = 0,\n    ballSpeed = 3;\n\nimage.onload = function () {\n  processNormalsImage({ image: image, normals: normals, alphas: depths }).then(function () {\n    loop = requestAnimationFrame(tick);\n  });\n};\nimage.src = 'hills3.png';\n\n// TODO: Boundary class, specifies innie or outie, provides bins for optimization\nvar BOUNDARIES = [[2, 190, 261, 187], [261, 187, 277, 200], [277, 200, 378, 216], [378, 216, 360, 286], [360, 286, 508, 360], [508, 360, 510, 508], [510, 508, 248, 508], [248, 508, 200, 428], [200, 428, 63, 451], [63, 451, 3, 412], [3, 412, 2, 190]\n\n// [248, 207, 268, 241],\n// [268, 241, 227, 250],\n// [227, 250, 186, 213],\n// [186, 213, 248, 207],\n\n// [98, 236, 116, 238,],\n// [116, 238, 192, 288],\n// [192, 288, 127, 274],\n// [127, 274, 98, 236]\n\n];\nfunction tick(dt) {\n  loop = requestAnimationFrame(tick);\n  var b = ballImpulse,\n      x = parseInt(ballX),\n      y = parseInt(ballY),\n      normal = [0, 0, -1],\n      depth = 0;\n  if (x >= 0 && x <= WIN_WIDTH && y >= 0 && y <= WIN_HEIGHT) {\n    normal = normals[WIN_WIDTH * y + x];\n    depth = depths[WIN_WIDTH * y + x];\n  }\n  var offset = $(b).rotateToPlane(normal).$;\n  var vector = $(b).plus(offset).unit().times(ballSpeed).rotateToPlane(PERSPECTIVE).$;\n  var currentPosition = [ballX, ballY, ballZ];\n  var newPosition = $(currentPosition).plus(vector).$;\n\n  var currentPosition2d = [currentPosition[0], currentPosition[1]],\n      newPosition2d = [newPosition[0], newPosition[1]],\n      vector2d = [vector[0], vector[1]];\n  // Minor fudge to avoid divide-by-zero situations:\n  if (currentPosition2d[0] === newPosition2d[0]) newPosition2d[0] += 0.001;\n\n  var movementRay = [].concat(newPosition2d, currentPosition2d);\n\n  // TODO: Refactor, cache normals during init\n  for (var i = 0; i < BOUNDARIES.length; i++) {\n\n    var boundary = BOUNDARIES[i],\n        p1 = [boundary[0], boundary[1]],\n        p2 = [boundary[2], boundary[3]],\n        boundaryVector = $(boundary).coordPairToVector().$,\n        boundaryNormal = $(boundaryVector).leftNormal().$;\n\n    // Maintain distance from walls\n\n    // If we're on the inside side of the boundary\n    if (!$(newPosition2d).isLeftOf(boundaryVector).$) {\n      var close = false,\n          proximityVector = [];\n\n      // check point 1\n      var dist = $(newPosition2d).distanceTo(p1).$;\n      if (dist < DISTANCE_THRESHOLD) {\n        close = true;\n        proximityVector = $([].concat(_toConsumableArray(p1), newPosition2d)).coordPairToVector().unit().times(DISTANCE_THRESHOLD - dist).$;\n      } else {\n        // check point 2\n        dist = $(newPosition2d).distanceTo(p2).$;\n        if (dist < DISTANCE_THRESHOLD) {\n          close = true;\n          proximityVector = $([].concat(_toConsumableArray(p2), newPosition2d)).coordPairToVector().unit().times(DISTANCE_THRESHOLD - dist).$;\n        } else {\n          // Bounding box check\n\n          // Extend bbox around vertices\n          p1 = $(p1).minusVector($(boundaryVector).times(DISTANCE_THRESHOLD).$).$;\n          p2 = $(p2).plus($(boundaryVector).times(DISTANCE_THRESHOLD).$).$;\n\n          if (newPosition2d[0] < p1[0] != newPosition2d[0] < p2[0] && newPosition2d[1] < p1[1] != newPosition2d[1] < p2[1]) {\n            // check distance to line\n            var distanceTestVector = $(boundaryNormal).times(DISTANCE_THRESHOLD).$;\n            var distanceRay = [].concat(newPosition2d, _toConsumableArray($(newPosition2d).minusVector(distanceTestVector).$));\n            var intersection = intersects.apply(undefined, _toConsumableArray(distanceRay).concat(_toConsumableArray(boundary)));\n            if (intersection) {\n              close = true;\n              dist = $([].concat(newPosition2d, _toConsumableArray(intersection))).coordPairToVector().length().$;\n              proximityVector = $([].concat(_toConsumableArray(intersection), newPosition2d)).coordPairToVector().unit().times(DISTANCE_THRESHOLD - dist).$;\n            }\n          }\n        }\n      }\n      if (close) {\n        var wallForce = $([proximityVector[0], 0, proximityVector[1]]).rotateToPlane(PERSPECTIVE).$;\n        newPosition = $(newPosition).plus(wallForce).$;\n      }\n    }\n  }\n\n  // Only apply changes if they're still inside the walkable polygon\n  var horizontalRay = [].concat(newPosition2d, [WIN_WIDTH, newPosition2d[1]]);\n  var crossings = 0;\n  // make sure no boundary vertices are on our test ray\n  var boundaries = [];\n  for (var _i = 0; _i < BOUNDARIES.length; _i++) {\n    var boundary = BOUNDARIES[_i];\n    if (boundary[1] === newPosition2d[1]) boundary[1] += 1;\n    if (boundary[3] === newPosition2d[1]) boundary[3] += 1;\n    boundaries.push(boundary);\n  }\n  for (var _i2 = 0; _i2 < boundaries.length; _i2++) {\n    var boundary = boundaries[_i2];\n    var intersection = intersects.apply(undefined, _toConsumableArray(horizontalRay).concat(_toConsumableArray(boundary)));\n    if (intersection) crossings++;\n  }\n  if (crossings % 2 != 0) {\n    var _newPosition = newPosition;\n\n    var _newPosition2 = _slicedToArray(_newPosition, 3);\n\n    ballX = _newPosition2[0];\n    ballY = _newPosition2[1];\n    ballZ = _newPosition2[2];\n  }\n\n  // }\n  ball.style.left = (ballX - 5).toString() + 'px';\n  ball.style.top = (ballY - 10).toString() + 'px';\n}\n\nwindow.onload = function () {\n  window.addEventListener(\"keydown\", function (e) {\n    if (e.keycode < 37 || e.keycode > 40) return;\n    e.preventDefault();\n    switch (e.keyCode) {\n      case LEFT_KEY:\n        ballImpulse[0] = -1;\n        break;\n      case RIGHT_KEY:\n        ballImpulse[0] = 1;\n        break;\n      case UP_KEY:\n        ballImpulse[2] = -1;\n        break;\n      case DOWN_KEY:\n        ballImpulse[2] = 1;\n        break;\n    }\n    ballImpulse = $(ballImpulse).unit().$;\n  });\n\n  window.addEventListener(\"keyup\", function (e) {\n    if (e.keycode < 37 || e.keycode > 40) return;\n    e.preventDefault();\n    switch (e.keyCode) {\n      case LEFT_KEY:\n        ballImpulse[0] = 0;\n        break;\n      case UP_KEY:\n        ballImpulse[2] = 0;\n        break;\n      case RIGHT_KEY:\n        ballImpulse[0] = 0;\n        break;\n      case DOWN_KEY:\n        ballImpulse[2] = 0;\n        break;\n    }\n    ballImpulse = $(ballImpulse).unit().$;\n  });\n\n  var startVec = [0, 0];\n\n  root.addEventListener('touchstart', function (e) {\n    e.preventDefault();\n    var touch = e.changedTouches[0];\n    startVec = [touch.clientX, touch.clientY];\n  });\n\n  root.addEventListener('touchmove', function (e) {\n    e.preventDefault();\n    var touch = e.changedTouches[0];\n    var newVec = [touch.clientX, touch.clientY];\n    var direction = $(newVec).minusVector(startVec).unit().$;\n    ballImpulse[0] = direction[0];\n    ballImpulse[2] = direction[1];\n  });\n\n  root.addEventListener('touchend', function (e) {\n    e.preventDefault();\n    ballImpulse[0] = 0;\n    ballImpulse[2] = 0;\n    startVec = [0, 0, 0];\n  });\n};\n\nmodule.exports = $;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ })
/******/ ]);