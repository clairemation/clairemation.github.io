var App =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar WebGLProgram = __webpack_require__(2);\n\nvar drawLiquid = function () {\n\n  var vertScriptUrl = \"./src/shaders/particles.vert\",\n      fragScriptUrl = \"./src/shaders/particles.frag\",\n      blurVertScriptUrl = \"./src/shaders/blur.vert\",\n      blurFragScriptUrl = \"./src/shaders/blur.frag\",\n      canvas = document.getElementById(\"canvas\"),\n      renderSnowProgram = null,\n      blurProgram = null,\n      snowParticleInfoBuf = null,\n      snowColorsBuf = null,\n      blurVertsBuf = null,\n      blurTexCoordsBuf = null,\n      viewportWidthBuf = null,\n      viewportHeightBuf = null,\n      gl = null,\n      fbo = null,\n      rawParticlesTexture = null,\n      delta = 0.0,\n      loopID = null,\n      numParticles = 2000,\n      particles = [],\n      colors = [],\n      tmp = 0.0,\n      gaussianBlurKernel = [1, 4, 7, 4, 1, 4, 16, 26, 16, 4, 7, 26, 41, 26, 7, 4, 16, 26, 16, 4, 1, 4, 7, 4, 1];\n\n  // individual variations\n  for (var i = 0; i < numParticles * 4; i += 4) {\n    particles[i] = Math.random() * 2 - 1; // X noise\n    particles[i + 1] = Math.random() * 2 - 1; // Y noise\n    particles[i + 2] = Math.random() * 2 - 1; // angle noise\n    particles[i + 3] = Math.random(); // delta noise\n\n    tmp = Math.random() * 0.4 + 0.45;\n    colors[i] = tmp;\n    colors[i + 1] = tmp;\n    colors[i + 2] = tmp;\n    colors[i + 3] = 1.0;\n  }\n\n  new WebGLProgram(canvas, vertScriptUrl, fragScriptUrl).then(function (results) {\n    renderSnowProgram = results;\n    gl = renderSnowProgram.gl;\n    return Promise.resolve();\n  }).then(function () {\n    new WebGLProgram(canvas, blurVertScriptUrl, blurFragScriptUrl).then(function (results) {\n      blurProgram = results;\n      setup();\n    });\n  });\n\n  function setup() {\n\n    // Set up snow program\n\n    renderSnowProgram.use();\n\n    snowParticleInfoBuf = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, snowParticleInfoBuf);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(particles), gl.STATIC_DRAW);\n\n    snowColorsBuf = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, snowColorsBuf);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);\n    var attLoc = renderSnowProgram.program.params.attributeLocations[\"aColors\"];\n    gl.enableVertexAttribArray(attLoc);\n    gl.vertexAttribPointer(attLoc, 4, gl.FLOAT, false, 0, 0);\n\n    fbo = gl.createFramebuffer();\n    rawParticlesTexture = gl.createTexture();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\n    gl.bindTexture(gl.TEXTURE_2D, rawParticlesTexture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 512, 512, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, rawParticlesTexture, 0);\n    gl.viewport(0, 0, 512, 512);\n    gl.clearColor(0.0, 0.0, 0.0, 0.0);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n    blurProgram.use();\n\n    blurVertsBuf = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, blurVertsBuf);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1.0, -1.0, 0.0, 1.0, -1.0, 0.0, 1.0, 1.0, 0.0, -1.0, 1.0, 0.0]), gl.STATIC_DRAW);\n\n    blurTexCoordsBuf = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, blurTexCoordsBuf);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0]), gl.STATIC_DRAW);\n    blurProgram.setUniform(\"uSampler\", 0);\n    blurProgram.setUniform(\"uViewportWidth\", 512.0);\n    blurProgram.setUniform(\"uViewportHeight\", 512.0);\n  }\n\n  function setupAttribute(buffer, glProg, attributeName, stride) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    var attLoc = glProg.program.params.attributeLocations[attributeName];\n    gl.enableVertexAttribArray(attLoc);\n    gl.vertexAttribPointer(attLoc, stride, gl.FLOAT, false, 0, 0);\n  }\n\n  function shutdownAttribute(prog, attributeName) {\n    var attLoc = prog.program.params.attributeLocations[attributeName];\n    gl.disableVertexAttribArray(attLoc);\n  }\n\n  function draw() {\n    loopID = requestAnimationFrame(draw);\n\n    renderSnowProgram.use();\n    setupAttribute(snowParticleInfoBuf, renderSnowProgram, \"aParticleInfo\", 4);\n    setupAttribute(snowColorsBuf, renderSnowProgram, \"aColors\", 4);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\n    drawSnow();\n\n    blurProgram.use();\n    setupAttribute(blurVertsBuf, blurProgram, \"aVertexCoords\", 3);\n    setupAttribute(blurTexCoordsBuf, blurProgram, \"aTextureCoords\", 2);\n\n    var u = gl.getUniformLocation(blurProgram.program.program, \"uKernel\");\n    gl.uniform1fv(u, [0.003765, 0.015019, 0.023792, 0.015019, 0.003765, 0.015019, 0.059912, 0.094907, 0.059912, 0.015019, 0.023792, 0.094907, 0.150342, 0.094907, 0.023792, 0.015019, 0.059912, 0.094907, 0.059912, 0.015019, 0.003765, 0.015019, 0.023792, 0.015019, 0.003765]);\n    gl.bindTexture(gl.TEXTURE_2D, rawParticlesTexture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    drawBlur();\n  }\n\n  function drawBlur() {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    gl.drawArrays(gl.TRIANGLE_FAN, 0, 4);\n  }\n\n  function drawSnow() {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    renderSnowProgram.setUniform(\"uDt\", delta);\n    gl.drawArrays(gl.POINTS, 0, numParticles);\n    delta += 0.005;\n    if (delta >= 1.0) {\n      window.cancelAnimationFrame(loopID);\n    };\n  }\n\n  function start() {\n    delta = 0;\n    if (loopID) {\n      window.cancelAnimationFrame(loopID);\n    }\n    draw();\n  }\n\n  return start;\n}();\n\nmodule.exports = drawLiquid;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar drawLiquid = __webpack_require__(0);\n\nvar slimeButton = document.getElementById(\"slime-button\");\n\nvar slimeAudio = document.getElementById(\"slime-audio\");\n\nslimeButton.addEventListener(\"click\", function () {\n\tdrawLiquid();\n\tsetTimeout(function () {\n\t\treturn slimeAudio.play();\n\t}, 400);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanM/OTU1MiJdLCJuYW1lcyI6WyJkcmF3TGlxdWlkIiwicmVxdWlyZSIsInNsaW1lQnV0dG9uIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInNsaW1lQXVkaW8iLCJhZGRFdmVudExpc3RlbmVyIiwic2V0VGltZW91dCIsInBsYXkiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLGFBQWEsbUJBQUFDLENBQVEsQ0FBUixDQUFuQjs7QUFFQSxJQUFNQyxjQUFjQyxTQUFTQyxjQUFULENBQXdCLGNBQXhCLENBQXBCOztBQUVBLElBQU1DLGFBQWFGLFNBQVNDLGNBQVQsQ0FBd0IsYUFBeEIsQ0FBbkI7O0FBRUFGLFlBQVlJLGdCQUFaLENBQTZCLE9BQTdCLEVBQXNDLFlBQU07QUFDM0NOO0FBQ0FPLFlBQVc7QUFBQSxTQUFNRixXQUFXRyxJQUFYLEVBQU47QUFBQSxFQUFYLEVBQW9DLEdBQXBDO0FBQ0EsQ0FIRCIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IGRyYXdMaXF1aWQgPSByZXF1aXJlKCcuL3BhcnRpY2xlcy5qcycpXG5cbmNvbnN0IHNsaW1lQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzbGltZS1idXR0b25cIilcblxuY29uc3Qgc2xpbWVBdWRpbyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2xpbWUtYXVkaW9cIilcblxuc2xpbWVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcblx0ZHJhd0xpcXVpZCgpXG5cdHNldFRpbWVvdXQoKCkgPT4gc2xpbWVBdWRpby5wbGF5KCksIDQwMClcbn0pXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2luZGV4LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/* by Claire Samuels - https://github.com/clairemation */\n\nvar GLUtil = __webpack_require__(3);\n\nfunction WebGLProgram(canvas, vertShaderUrl, fragShaderUrl) {\n  this.canvas = canvas;\n  this.gl = canvas.getContext(\"webgl\") || canvas.getContext(\"experimental-webgl\");\n  var gl = this.gl;\n  this.projectionMatrix = WebGLProgram.makeOrthoMatrix(canvas.clientWidth, canvas.clientHeight, 1000);\n  this.mvMatrix = [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0];\n  this.program = {};\n  return new Promise(function (resolve, reject) {\n    GLUtil.buildGLProgramFromFiles(gl, this.program, vertShaderUrl, fragShaderUrl).then(function (result) {\n      this.program = {\n        program: result[0],\n        params: result[1]\n      };\n      GLUtil.standardSettings(gl);\n      resolve(this);\n    }.bind(this));\n  }.bind(this));\n}\n\nWebGLProgram.prototype.use = function () {\n  this.gl.useProgram(this.program.program);\n};\n\nWebGLProgram.prototype.bindDataToAttribute = function (attribute, data, numComponents) {\n  var buffer = this.gl.createBuffer();\n  this.gl.bindBuffer(this.gl.ARRAY_BUFFER, buffer);\n  this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(data), this.gl.STATIC_DRAW);\n  var attribLocation = this.program.params.attributeLocations[attribute];\n  this.gl.enableVertexAttribArray(attribLocation);\n  this.gl.vertexAttribPointer(this.program.params.attributeLocations[attribute], numComponents, this.gl.FLOAT, false, 0, 0);\n};\n\nWebGLProgram.makeProjectionMatrix = function (fov, aspect, near, far, isInRadians) {\n  if (!isInRadians) fov *= Math.PI / 180;\n  var f = 1.0 / Math.tan(fov / 2);\n  var rangeInverse = 1.0 / (near - far);\n  return new Float32Array([f / aspect, 0, 0, 0, 0, f, 0, 0, 0, 0, (near + far) * rangeInverse, -1, 0, 0, near * far * rangeInverse * 2, 0]);\n};\n\nWebGLProgram.makeOrthoMatrix = function (width, height, depth) {\n  return new Float32Array([2 / width, 0, 0, 0, 0, -2 / height, 0, 0, 0, 0, 2 / depth, 0, -1, 1, 0, 1]);\n};\n\nWebGLProgram.prototype.setUniform = function (name, data) {\n  var setter = this.program.params.uniformSetters[name];\n  var location = this.program.params.uniformLocations[name];\n  if (setter === \"uniform3f\") {\n    this.gl[setter](location, data[0], data[1], data[2]);\n  } else if (setter === \"uniform1f\") {\n    this.gl[setter](location, data);\n  } else {\n    this.gl[setter](location, false, data);\n  }\n};\n\nWebGLProgram.prototype.attachTexture = function (img) {\n  if (typeof img === \"string\") {\n    return new Promise(function (resolve, reject) {\n      WebGLProgram.loadImage(img).then(function (result) {\n        WebGLProgram.attachTexture(this.gl, result, 0, \"LINEAR\", \"LINEAR_MIPMAP_NEAREST\");\n        resolve();\n      });\n    });\n  }\n  return new Promise(function (resolve, reject) {\n    WebGLProgram.attachTexture(this.gl, img, 0, \"LINEAR\", \"LINEAR_MIPMAP_NEAREST\");\n    resolve();\n  });\n};\n\nWebGLProgram.attachTexture = function (gl, texImage, index, magFilter, minFilter) {\n  index = index || 0;\n  magFilter = magFilter || \"LINEAR\";\n  minFilter = minFilter || \"LINEAR_MIPMAP_NEAREST\";\n  var texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texImage);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl[magFilter]);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl[minFilter]);\n  if (magFilter.concat(minFilter).match(/MIPMAP/)) {\n    gl.generateMipmap(gl.TEXTURE_2D);\n  }\n  gl.activeTexture(gl.TEXTURE0);\n};\n\nWebGLProgram.loadImage = function (url) {\n  return new Promise(function (resolve, reject) {\n    var img = new Image();\n    img.onload = function () {\n      resolve(img);\n    };\n    img.onerror = function () {\n      reject();\n    };\n    img.src = url;\n  });\n};\n\nmodule.exports = WebGLProgram;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGlicy93ZWJnbC1wcm9ncmFtLmpzP2I4N2YiXSwibmFtZXMiOlsiR0xVdGlsIiwicmVxdWlyZSIsIldlYkdMUHJvZ3JhbSIsImNhbnZhcyIsInZlcnRTaGFkZXJVcmwiLCJmcmFnU2hhZGVyVXJsIiwiZ2wiLCJnZXRDb250ZXh0IiwicHJvamVjdGlvbk1hdHJpeCIsIm1ha2VPcnRob01hdHJpeCIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwibXZNYXRyaXgiLCJwcm9ncmFtIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJidWlsZEdMUHJvZ3JhbUZyb21GaWxlcyIsInRoZW4iLCJyZXN1bHQiLCJwYXJhbXMiLCJzdGFuZGFyZFNldHRpbmdzIiwiYmluZCIsInByb3RvdHlwZSIsInVzZSIsInVzZVByb2dyYW0iLCJiaW5kRGF0YVRvQXR0cmlidXRlIiwiYXR0cmlidXRlIiwiZGF0YSIsIm51bUNvbXBvbmVudHMiLCJidWZmZXIiLCJjcmVhdGVCdWZmZXIiLCJiaW5kQnVmZmVyIiwiQVJSQVlfQlVGRkVSIiwiYnVmZmVyRGF0YSIsIkZsb2F0MzJBcnJheSIsIlNUQVRJQ19EUkFXIiwiYXR0cmliTG9jYXRpb24iLCJhdHRyaWJ1dGVMb2NhdGlvbnMiLCJlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSIsInZlcnRleEF0dHJpYlBvaW50ZXIiLCJGTE9BVCIsIm1ha2VQcm9qZWN0aW9uTWF0cml4IiwiZm92IiwiYXNwZWN0IiwibmVhciIsImZhciIsImlzSW5SYWRpYW5zIiwiTWF0aCIsIlBJIiwiZiIsInRhbiIsInJhbmdlSW52ZXJzZSIsIndpZHRoIiwiaGVpZ2h0IiwiZGVwdGgiLCJzZXRVbmlmb3JtIiwibmFtZSIsInNldHRlciIsInVuaWZvcm1TZXR0ZXJzIiwibG9jYXRpb24iLCJ1bmlmb3JtTG9jYXRpb25zIiwiYXR0YWNoVGV4dHVyZSIsImltZyIsImxvYWRJbWFnZSIsInRleEltYWdlIiwiaW5kZXgiLCJtYWdGaWx0ZXIiLCJtaW5GaWx0ZXIiLCJ0ZXh0dXJlIiwiY3JlYXRlVGV4dHVyZSIsImJpbmRUZXh0dXJlIiwiVEVYVFVSRV8yRCIsInRleEltYWdlMkQiLCJSR0JBIiwiVU5TSUdORURfQllURSIsInRleFBhcmFtZXRlcmkiLCJURVhUVVJFX01BR19GSUxURVIiLCJURVhUVVJFX01JTl9GSUxURVIiLCJjb25jYXQiLCJtYXRjaCIsImdlbmVyYXRlTWlwbWFwIiwiYWN0aXZlVGV4dHVyZSIsIlRFWFRVUkUwIiwidXJsIiwiSW1hZ2UiLCJvbmxvYWQiLCJvbmVycm9yIiwic3JjIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFFQSxJQUFNQSxTQUFTLG1CQUFBQyxDQUFRLENBQVIsQ0FBZjs7QUFFQSxTQUFTQyxZQUFULENBQXNCQyxNQUF0QixFQUE4QkMsYUFBOUIsRUFBNkNDLGFBQTdDLEVBQTJEO0FBQ3pELE9BQUtGLE1BQUwsR0FBY0EsTUFBZDtBQUNBLE9BQUtHLEVBQUwsR0FBVUgsT0FBT0ksVUFBUCxDQUFrQixPQUFsQixLQUE4QkosT0FBT0ksVUFBUCxDQUFrQixvQkFBbEIsQ0FBeEM7QUFDQSxNQUFJRCxLQUFLLEtBQUtBLEVBQWQ7QUFDQSxPQUFLRSxnQkFBTCxHQUF3Qk4sYUFBYU8sZUFBYixDQUE2Qk4sT0FBT08sV0FBcEMsRUFBaURQLE9BQU9RLFlBQXhELEVBQXNFLElBQXRFLENBQXhCO0FBQ0EsT0FBS0MsUUFBTCxHQUFnQixDQUNkLEdBRGMsRUFDVCxHQURTLEVBQ0osR0FESSxFQUNDLEdBREQsRUFFZCxHQUZjLEVBRVQsR0FGUyxFQUVKLEdBRkksRUFFQyxHQUZELEVBR2QsR0FIYyxFQUdULEdBSFMsRUFHSixHQUhJLEVBR0MsR0FIRCxFQUlkLEdBSmMsRUFJVCxHQUpTLEVBSUosR0FKSSxFQUlDLEdBSkQsQ0FBaEI7QUFNQSxPQUFLQyxPQUFMLEdBQWUsRUFBZjtBQUNBLFNBQU8sSUFBSUMsT0FBSixDQUFZLFVBQVNDLE9BQVQsRUFBa0JDLE1BQWxCLEVBQXlCO0FBQzFDaEIsV0FBT2lCLHVCQUFQLENBQStCWCxFQUEvQixFQUFtQyxLQUFLTyxPQUF4QyxFQUFpRFQsYUFBakQsRUFBZ0VDLGFBQWhFLEVBQStFYSxJQUEvRSxDQUFvRixVQUFTQyxNQUFULEVBQWdCO0FBQ2xHLFdBQUtOLE9BQUwsR0FBZTtBQUNiQSxpQkFBU00sT0FBTyxDQUFQLENBREk7QUFFYkMsZ0JBQVFELE9BQU8sQ0FBUDtBQUZLLE9BQWY7QUFJQW5CLGFBQU9xQixnQkFBUCxDQUF3QmYsRUFBeEI7QUFDQVMsY0FBUSxJQUFSO0FBQ0QsS0FQbUYsQ0FPbEZPLElBUGtGLENBTzdFLElBUDZFLENBQXBGO0FBUUQsR0FUa0IsQ0FTakJBLElBVGlCLENBU1osSUFUWSxDQUFaLENBQVA7QUFVRDs7QUFFRHBCLGFBQWFxQixTQUFiLENBQXVCQyxHQUF2QixHQUE2QixZQUFVO0FBQ3JDLE9BQUtsQixFQUFMLENBQVFtQixVQUFSLENBQW1CLEtBQUtaLE9BQUwsQ0FBYUEsT0FBaEM7QUFDRCxDQUZEOztBQUlBWCxhQUFhcUIsU0FBYixDQUF1QkcsbUJBQXZCLEdBQTZDLFVBQVNDLFNBQVQsRUFBb0JDLElBQXBCLEVBQTBCQyxhQUExQixFQUF3QztBQUNuRixNQUFJQyxTQUFTLEtBQUt4QixFQUFMLENBQVF5QixZQUFSLEVBQWI7QUFDQSxPQUFLekIsRUFBTCxDQUFRMEIsVUFBUixDQUFtQixLQUFLMUIsRUFBTCxDQUFRMkIsWUFBM0IsRUFBeUNILE1BQXpDO0FBQ0EsT0FBS3hCLEVBQUwsQ0FBUTRCLFVBQVIsQ0FBbUIsS0FBSzVCLEVBQUwsQ0FBUTJCLFlBQTNCLEVBQXlDLElBQUlFLFlBQUosQ0FBaUJQLElBQWpCLENBQXpDLEVBQWlFLEtBQUt0QixFQUFMLENBQVE4QixXQUF6RTtBQUNBLE1BQUlDLGlCQUFpQixLQUFLeEIsT0FBTCxDQUFhTyxNQUFiLENBQW9Ca0Isa0JBQXBCLENBQXVDWCxTQUF2QyxDQUFyQjtBQUNBLE9BQUtyQixFQUFMLENBQVFpQyx1QkFBUixDQUFnQ0YsY0FBaEM7QUFDQSxPQUFLL0IsRUFBTCxDQUFRa0MsbUJBQVIsQ0FBNEIsS0FBSzNCLE9BQUwsQ0FBYU8sTUFBYixDQUFvQmtCLGtCQUFwQixDQUF1Q1gsU0FBdkMsQ0FBNUIsRUFBK0VFLGFBQS9FLEVBQThGLEtBQUt2QixFQUFMLENBQVFtQyxLQUF0RyxFQUE2RyxLQUE3RyxFQUFvSCxDQUFwSCxFQUF1SCxDQUF2SDtBQUNELENBUEQ7O0FBU0F2QyxhQUFhd0Msb0JBQWIsR0FBb0MsVUFBU0MsR0FBVCxFQUFjQyxNQUFkLEVBQXNCQyxJQUF0QixFQUE0QkMsR0FBNUIsRUFBaUNDLFdBQWpDLEVBQTZDO0FBQy9FLE1BQUksQ0FBQ0EsV0FBTCxFQUFrQkosT0FBT0ssS0FBS0MsRUFBTCxHQUFVLEdBQWpCO0FBQ2xCLE1BQUlDLElBQUksTUFBTUYsS0FBS0csR0FBTCxDQUFTUixNQUFNLENBQWYsQ0FBZDtBQUNBLE1BQUlTLGVBQWUsT0FBT1AsT0FBS0MsR0FBWixDQUFuQjtBQUNBLFNBQU8sSUFBSVgsWUFBSixDQUFpQixDQUN0QmUsSUFBSU4sTUFEa0IsRUFDVixDQURVLEVBQ1AsQ0FETyxFQUNKLENBREksRUFFdEIsQ0FGc0IsRUFFbkJNLENBRm1CLEVBRWhCLENBRmdCLEVBRWIsQ0FGYSxFQUd0QixDQUhzQixFQUduQixDQUhtQixFQUdoQixDQUFDTCxPQUFLQyxHQUFOLElBQWFNLFlBSEcsRUFHVyxDQUFDLENBSFosRUFJdEIsQ0FKc0IsRUFJbkIsQ0FKbUIsRUFJaEJQLE9BQUtDLEdBQUwsR0FBV00sWUFBWCxHQUEwQixDQUpWLEVBSWEsQ0FKYixDQUFqQixDQUFQO0FBTUQsQ0FWRDs7QUFZQWxELGFBQWFPLGVBQWIsR0FBK0IsVUFBUzRDLEtBQVQsRUFBZ0JDLE1BQWhCLEVBQXdCQyxLQUF4QixFQUE4QjtBQUMzRCxTQUFPLElBQUlwQixZQUFKLENBQWlCLENBQ3RCLElBQUVrQixLQURvQixFQUNiLENBRGEsRUFDVixDQURVLEVBQ1AsQ0FETyxFQUV0QixDQUZzQixFQUVuQixDQUFDLENBQUQsR0FBR0MsTUFGZ0IsRUFFUixDQUZRLEVBRUwsQ0FGSyxFQUd0QixDQUhzQixFQUduQixDQUhtQixFQUdoQixJQUFFQyxLQUhjLEVBR1AsQ0FITyxFQUl0QixDQUFDLENBSnFCLEVBSWxCLENBSmtCLEVBSWYsQ0FKZSxFQUlaLENBSlksQ0FBakIsQ0FBUDtBQU1ELENBUEQ7O0FBU0FyRCxhQUFhcUIsU0FBYixDQUF1QmlDLFVBQXZCLEdBQW9DLFVBQVNDLElBQVQsRUFBZTdCLElBQWYsRUFBb0I7QUFDdEQsTUFBSThCLFNBQVMsS0FBSzdDLE9BQUwsQ0FBYU8sTUFBYixDQUFvQnVDLGNBQXBCLENBQW1DRixJQUFuQyxDQUFiO0FBQ0EsTUFBSUcsV0FBVyxLQUFLL0MsT0FBTCxDQUFhTyxNQUFiLENBQW9CeUMsZ0JBQXBCLENBQXFDSixJQUFyQyxDQUFmO0FBQ0EsTUFBSUMsV0FBVyxXQUFmLEVBQTJCO0FBQ3pCLFNBQUtwRCxFQUFMLENBQVFvRCxNQUFSLEVBQWdCRSxRQUFoQixFQUEwQmhDLEtBQUssQ0FBTCxDQUExQixFQUFtQ0EsS0FBSyxDQUFMLENBQW5DLEVBQTRDQSxLQUFLLENBQUwsQ0FBNUM7QUFDRCxHQUZELE1BR0ssSUFBSThCLFdBQVcsV0FBZixFQUEyQjtBQUM5QixTQUFLcEQsRUFBTCxDQUFRb0QsTUFBUixFQUFnQkUsUUFBaEIsRUFBMEJoQyxJQUExQjtBQUNELEdBRkksTUFFRTtBQUNMLFNBQUt0QixFQUFMLENBQVFvRCxNQUFSLEVBQWdCRSxRQUFoQixFQUEwQixLQUExQixFQUFpQ2hDLElBQWpDO0FBQ0Q7QUFDRixDQVhEOztBQWFBMUIsYUFBYXFCLFNBQWIsQ0FBdUJ1QyxhQUF2QixHQUF1QyxVQUFTQyxHQUFULEVBQWE7QUFDbEQsTUFBSSxPQUFPQSxHQUFQLEtBQWUsUUFBbkIsRUFBNEI7QUFDMUIsV0FBTyxJQUFJakQsT0FBSixDQUFZLFVBQVNDLE9BQVQsRUFBa0JDLE1BQWxCLEVBQXlCO0FBQzFDZCxtQkFBYThELFNBQWIsQ0FBdUJELEdBQXZCLEVBQTRCN0MsSUFBNUIsQ0FBaUMsVUFBU0MsTUFBVCxFQUFnQjtBQUMvQ2pCLHFCQUFhNEQsYUFBYixDQUEyQixLQUFLeEQsRUFBaEMsRUFBb0NhLE1BQXBDLEVBQTRDLENBQTVDLEVBQStDLFFBQS9DLEVBQXlELHVCQUF6RDtBQUNBSjtBQUNELE9BSEQ7QUFJRCxLQUxNLENBQVA7QUFNRDtBQUNELFNBQU8sSUFBSUQsT0FBSixDQUFZLFVBQVNDLE9BQVQsRUFBa0JDLE1BQWxCLEVBQXlCO0FBQzFDZCxpQkFBYTRELGFBQWIsQ0FBMkIsS0FBS3hELEVBQWhDLEVBQW9DeUQsR0FBcEMsRUFBeUMsQ0FBekMsRUFBNEMsUUFBNUMsRUFBc0QsdUJBQXREO0FBQ0FoRDtBQUNELEdBSE0sQ0FBUDtBQUlELENBYkQ7O0FBZUFiLGFBQWE0RCxhQUFiLEdBQTZCLFVBQVN4RCxFQUFULEVBQWEyRCxRQUFiLEVBQXVCQyxLQUF2QixFQUE4QkMsU0FBOUIsRUFBeUNDLFNBQXpDLEVBQW1EO0FBQzlFRixVQUFRQSxTQUFTLENBQWpCO0FBQ0FDLGNBQVlBLGFBQWEsUUFBekI7QUFDQUMsY0FBWUEsYUFBYSx1QkFBekI7QUFDQSxNQUFJQyxVQUFVL0QsR0FBR2dFLGFBQUgsRUFBZDtBQUNBaEUsS0FBR2lFLFdBQUgsQ0FBZWpFLEdBQUdrRSxVQUFsQixFQUE4QkgsT0FBOUI7QUFDQS9ELEtBQUdtRSxVQUFILENBQWNuRSxHQUFHa0UsVUFBakIsRUFBNkIsQ0FBN0IsRUFBZ0NsRSxHQUFHb0UsSUFBbkMsRUFBeUNwRSxHQUFHb0UsSUFBNUMsRUFBa0RwRSxHQUFHcUUsYUFBckQsRUFBb0VWLFFBQXBFO0FBQ0EzRCxLQUFHc0UsYUFBSCxDQUFpQnRFLEdBQUdrRSxVQUFwQixFQUFnQ2xFLEdBQUd1RSxrQkFBbkMsRUFBdUR2RSxHQUFHNkQsU0FBSCxDQUF2RDtBQUNBN0QsS0FBR3NFLGFBQUgsQ0FBaUJ0RSxHQUFHa0UsVUFBcEIsRUFBZ0NsRSxHQUFHd0Usa0JBQW5DLEVBQXVEeEUsR0FBRzhELFNBQUgsQ0FBdkQ7QUFDQSxNQUFJRCxVQUFVWSxNQUFWLENBQWlCWCxTQUFqQixFQUE0QlksS0FBNUIsQ0FBa0MsUUFBbEMsQ0FBSixFQUFnRDtBQUM5QzFFLE9BQUcyRSxjQUFILENBQWtCM0UsR0FBR2tFLFVBQXJCO0FBQ0Q7QUFDRGxFLEtBQUc0RSxhQUFILENBQWlCNUUsR0FBRzZFLFFBQXBCO0FBQ0QsQ0FiRDs7QUFlQWpGLGFBQWE4RCxTQUFiLEdBQXlCLFVBQVNvQixHQUFULEVBQWE7QUFDcEMsU0FBTyxJQUFJdEUsT0FBSixDQUFZLFVBQVNDLE9BQVQsRUFBa0JDLE1BQWxCLEVBQXlCO0FBQzFDLFFBQUkrQyxNQUFNLElBQUlzQixLQUFKLEVBQVY7QUFDQXRCLFFBQUl1QixNQUFKLEdBQWEsWUFBVTtBQUNyQnZFLGNBQVFnRCxHQUFSO0FBQ0QsS0FGRDtBQUdBQSxRQUFJd0IsT0FBSixHQUFjLFlBQVU7QUFDdEJ2RTtBQUNELEtBRkQ7QUFHQStDLFFBQUl5QixHQUFKLEdBQVVKLEdBQVY7QUFDRCxHQVRNLENBQVA7QUFVRCxDQVhEOztBQWFBSyxPQUFPQyxPQUFQLEdBQWlCeEYsWUFBakIiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGJ5IENsYWlyZSBTYW11ZWxzIC0gaHR0cHM6Ly9naXRodWIuY29tL2NsYWlyZW1hdGlvbiAqL1xuXG5jb25zdCBHTFV0aWwgPSByZXF1aXJlKFwiLi93ZWJnbF91dGlscy5qc1wiKVxuXG5mdW5jdGlvbiBXZWJHTFByb2dyYW0oY2FudmFzLCB2ZXJ0U2hhZGVyVXJsLCBmcmFnU2hhZGVyVXJsKXtcbiAgdGhpcy5jYW52YXMgPSBjYW52YXM7XG4gIHRoaXMuZ2wgPSBjYW52YXMuZ2V0Q29udGV4dChcIndlYmdsXCIpIHx8IGNhbnZhcy5nZXRDb250ZXh0KFwiZXhwZXJpbWVudGFsLXdlYmdsXCIpO1xuICB2YXIgZ2wgPSB0aGlzLmdsO1xuICB0aGlzLnByb2plY3Rpb25NYXRyaXggPSBXZWJHTFByb2dyYW0ubWFrZU9ydGhvTWF0cml4KGNhbnZhcy5jbGllbnRXaWR0aCwgY2FudmFzLmNsaWVudEhlaWdodCwgMTAwMCk7XG4gIHRoaXMubXZNYXRyaXggPSBbXG4gICAgMS4wLCAwLjAsIDAuMCwgMC4wLFxuICAgIDAuMCwgMS4wLCAwLjAsIDAuMCxcbiAgICAwLjAsIDAuMCwgMS4wLCAwLjAsXG4gICAgMC4wLCAwLjAsIDAuMCwgMS4wXG4gICAgXTtcbiAgdGhpcy5wcm9ncmFtID0ge307XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIEdMVXRpbC5idWlsZEdMUHJvZ3JhbUZyb21GaWxlcyhnbCwgdGhpcy5wcm9ncmFtLCB2ZXJ0U2hhZGVyVXJsLCBmcmFnU2hhZGVyVXJsKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCl7XG4gICAgICB0aGlzLnByb2dyYW0gPSB7XG4gICAgICAgIHByb2dyYW06IHJlc3VsdFswXSxcbiAgICAgICAgcGFyYW1zOiByZXN1bHRbMV1cbiAgICAgIH07XG4gICAgICBHTFV0aWwuc3RhbmRhcmRTZXR0aW5ncyhnbCk7XG4gICAgICByZXNvbHZlKHRoaXMpO1xuICAgIH0uYmluZCh0aGlzKSk7XG4gIH0uYmluZCh0aGlzKSk7XG59XG5cbldlYkdMUHJvZ3JhbS5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24oKXtcbiAgdGhpcy5nbC51c2VQcm9ncmFtKHRoaXMucHJvZ3JhbS5wcm9ncmFtKTtcbn07XG5cbldlYkdMUHJvZ3JhbS5wcm90b3R5cGUuYmluZERhdGFUb0F0dHJpYnV0ZSA9IGZ1bmN0aW9uKGF0dHJpYnV0ZSwgZGF0YSwgbnVtQ29tcG9uZW50cyl7XG4gIHZhciBidWZmZXIgPSB0aGlzLmdsLmNyZWF0ZUJ1ZmZlcigpO1xuICB0aGlzLmdsLmJpbmRCdWZmZXIodGhpcy5nbC5BUlJBWV9CVUZGRVIsIGJ1ZmZlcik7XG4gIHRoaXMuZ2wuYnVmZmVyRGF0YSh0aGlzLmdsLkFSUkFZX0JVRkZFUiwgbmV3IEZsb2F0MzJBcnJheShkYXRhKSwgdGhpcy5nbC5TVEFUSUNfRFJBVyk7XG4gIHZhciBhdHRyaWJMb2NhdGlvbiA9IHRoaXMucHJvZ3JhbS5wYXJhbXMuYXR0cmlidXRlTG9jYXRpb25zW2F0dHJpYnV0ZV07XG4gIHRoaXMuZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoYXR0cmliTG9jYXRpb24pO1xuICB0aGlzLmdsLnZlcnRleEF0dHJpYlBvaW50ZXIodGhpcy5wcm9ncmFtLnBhcmFtcy5hdHRyaWJ1dGVMb2NhdGlvbnNbYXR0cmlidXRlXSwgbnVtQ29tcG9uZW50cywgdGhpcy5nbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xufTtcblxuV2ViR0xQcm9ncmFtLm1ha2VQcm9qZWN0aW9uTWF0cml4ID0gZnVuY3Rpb24oZm92LCBhc3BlY3QsIG5lYXIsIGZhciwgaXNJblJhZGlhbnMpe1xuICBpZiAoIWlzSW5SYWRpYW5zKSBmb3YgKj0gTWF0aC5QSSAvIDE4MDtcbiAgdmFyIGYgPSAxLjAgLyBNYXRoLnRhbihmb3YgLyAyKTtcbiAgdmFyIHJhbmdlSW52ZXJzZSA9IDEuMCAvIChuZWFyLWZhcik7XG4gIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KFtcbiAgICBmIC8gYXNwZWN0LCAwLCAwLCAwLFxuICAgIDAsIGYsIDAsIDAsXG4gICAgMCwgMCwgKG5lYXIrZmFyKSAqIHJhbmdlSW52ZXJzZSwgLTEsXG4gICAgMCwgMCwgbmVhcipmYXIgKiByYW5nZUludmVyc2UgKiAyLCAwXG4gIF0pO1xufTtcblxuV2ViR0xQcm9ncmFtLm1ha2VPcnRob01hdHJpeCA9IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQsIGRlcHRoKXtcbiAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoW1xuICAgIDIvd2lkdGgsIDAsIDAsIDAsXG4gICAgMCwgLTIvaGVpZ2h0LCAwLCAwLFxuICAgIDAsIDAsIDIvZGVwdGgsIDAsXG4gICAgLTEsIDEsIDAsIDFcbiAgXSk7XG59O1xuXG5XZWJHTFByb2dyYW0ucHJvdG90eXBlLnNldFVuaWZvcm0gPSBmdW5jdGlvbihuYW1lLCBkYXRhKXtcbiAgdmFyIHNldHRlciA9IHRoaXMucHJvZ3JhbS5wYXJhbXMudW5pZm9ybVNldHRlcnNbbmFtZV07XG4gIHZhciBsb2NhdGlvbiA9IHRoaXMucHJvZ3JhbS5wYXJhbXMudW5pZm9ybUxvY2F0aW9uc1tuYW1lXTtcbiAgaWYgKHNldHRlciA9PT0gXCJ1bmlmb3JtM2ZcIil7XG4gICAgdGhpcy5nbFtzZXR0ZXJdKGxvY2F0aW9uLCBkYXRhWzBdLCBkYXRhWzFdLCBkYXRhWzJdKTtcbiAgfVxuICBlbHNlIGlmIChzZXR0ZXIgPT09IFwidW5pZm9ybTFmXCIpe1xuICAgIHRoaXMuZ2xbc2V0dGVyXShsb2NhdGlvbiwgZGF0YSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5nbFtzZXR0ZXJdKGxvY2F0aW9uLCBmYWxzZSwgZGF0YSk7XG4gIH1cbn07XG5cbldlYkdMUHJvZ3JhbS5wcm90b3R5cGUuYXR0YWNoVGV4dHVyZSA9IGZ1bmN0aW9uKGltZyl7XG4gIGlmICh0eXBlb2YgaW1nID09PSBcInN0cmluZ1wiKXtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICAgIFdlYkdMUHJvZ3JhbS5sb2FkSW1hZ2UoaW1nKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCl7XG4gICAgICAgIFdlYkdMUHJvZ3JhbS5hdHRhY2hUZXh0dXJlKHRoaXMuZ2wsIHJlc3VsdCwgMCwgXCJMSU5FQVJcIiwgXCJMSU5FQVJfTUlQTUFQX05FQVJFU1RcIik7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH0pXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgV2ViR0xQcm9ncmFtLmF0dGFjaFRleHR1cmUodGhpcy5nbCwgaW1nLCAwLCBcIkxJTkVBUlwiLCBcIkxJTkVBUl9NSVBNQVBfTkVBUkVTVFwiKTtcbiAgICByZXNvbHZlKCk7XG4gIH0pO1xufTtcblxuV2ViR0xQcm9ncmFtLmF0dGFjaFRleHR1cmUgPSBmdW5jdGlvbihnbCwgdGV4SW1hZ2UsIGluZGV4LCBtYWdGaWx0ZXIsIG1pbkZpbHRlcil7XG4gIGluZGV4ID0gaW5kZXggfHwgMDtcbiAgbWFnRmlsdGVyID0gbWFnRmlsdGVyIHx8IFwiTElORUFSXCI7XG4gIG1pbkZpbHRlciA9IG1pbkZpbHRlciB8fCBcIkxJTkVBUl9NSVBNQVBfTkVBUkVTVFwiO1xuICB2YXIgdGV4dHVyZSA9IGdsLmNyZWF0ZVRleHR1cmUoKTtcbiAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZSk7XG4gIGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgZ2wuUkdCQSwgZ2wuUkdCQSwgZ2wuVU5TSUdORURfQllURSwgdGV4SW1hZ2UpO1xuICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2xbbWFnRmlsdGVyXSk7XG4gIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbFttaW5GaWx0ZXJdKTtcbiAgaWYgKG1hZ0ZpbHRlci5jb25jYXQobWluRmlsdGVyKS5tYXRjaCgvTUlQTUFQLykpe1xuICAgIGdsLmdlbmVyYXRlTWlwbWFwKGdsLlRFWFRVUkVfMkQpO1xuICB9XG4gIGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTApO1xufTtcblxuV2ViR0xQcm9ncmFtLmxvYWRJbWFnZSA9IGZ1bmN0aW9uKHVybCl7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHZhciBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICBpbWcub25sb2FkID0gZnVuY3Rpb24oKXtcbiAgICAgIHJlc29sdmUoaW1nKTtcbiAgICB9XG4gICAgaW1nLm9uZXJyb3IgPSBmdW5jdGlvbigpe1xuICAgICAgcmVqZWN0KCk7XG4gICAgfVxuICAgIGltZy5zcmMgPSB1cmw7XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBXZWJHTFByb2dyYW1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbGlicy93ZWJnbC1wcm9ncmFtLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/* by Claire Samuels - https://github.com/clairemation */\n\nvar GLUtil = function () {\n\n  return {\n    standardSettings: standardSettings,\n    buildGLProgramFromFiles: buildGLProgramFromFiles\n  };\n\n  function standardSettings(gl) {\n    gl.clearColor(0.0, 0.0, 0.0, 0.0);\n    // gl.clearDepth(1.0);\n    // gl.enable(gl.DEPTH_TEST);\n    gl.enable(gl.BLEND);\n    gl.blendEquation(gl.FUNC_ADD);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n    // gl.depthFunc(gl.LEQUAL);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n  }\n\n  function buildGLProgramFromFiles(gl, glProg, vUrl, fUrl) {\n    return new Promise(function (resolve, reject) {\n      loadBothShaderScripts(vUrl, fUrl).then(function (scripts) {\n        var shaders = makeBothShadersFromScripts(gl, scripts);\n        var program = buildProgramFromShaders(gl, shaders);\n        var parameters = getProgramLocations(gl, program, scripts);\n        resolve([program, parameters]);\n      });\n    });\n  }\n\n  function buildProgramFromShaders(gl, shaders) {\n    var program = gl.createProgram();\n    gl.attachShader(program, shaders[0]);\n    gl.attachShader(program, shaders[1]);\n    gl.linkProgram(program);\n    return program;\n  }\n\n  function loadSingleShaderScript(url) {\n    return new Promise(function (resolve, reject) {\n      var script;\n      var request = new XMLHttpRequest();\n      request.onreadystatechange = function () {\n        if (this.readyState == 4) {\n          if (this.status == 200) {\n            resolve(this.responseText);\n          } else {\n            reject(\"Error loading shader script: HTTP status \" + this.status);\n          }\n        }\n      };\n      request.open(\"GET\", url, true);\n      request.send();\n    });\n  }\n\n  function loadBothShaderScripts(vUrl, fUrl) {\n    var scripts = [loadSingleShaderScript(vUrl), loadSingleShaderScript(fUrl)];\n    return Promise.all(scripts);\n  }\n\n  function makeShaderFromScript(gl, script, type) {\n    var shader = gl.createShader(type);\n    gl.shaderSource(shader, script);\n    gl.compileShader(shader);\n    return shader;\n  }\n\n  function makeBothShadersFromScripts(gl, scripts) {\n    return [makeShaderFromScript(gl, scripts[0], gl.VERTEX_SHADER), makeShaderFromScript(gl, scripts[1], gl.FRAGMENT_SHADER)];\n  }\n\n  function getAttributeNames(script) {\n    var attributeNames = [];\n    var re = /attribute.*\\W(\\w*);/g;\n    var match = re.exec(script);\n    while (!!match) {\n      attributeNames.push(match[1]);\n      match = re.exec(script);\n    }\n    return attributeNames;\n  }\n\n  function getUniformNames(script) {\n    var uniformNames = [];\n    var re = /uniform.*\\W(\\w*);/g;\n    var match = re.exec(script);\n    while (!!match) {\n      uniformNames.push(match[1]);\n      match = re.exec(script);\n    }\n    return uniformNames;\n  }\n\n  function getUniformSetters(script) {\n    var settersLookup = {\n      'float': \"uniform1f\",\n      'vec3': \"uniform3f\",\n      'mat4': \"uniformMatrix4fv\",\n      'mat3': \"uniformMatrix3fv\",\n      'int': \"uniform1i\",\n      'sampler2D': \"uniform1i\"\n    };\n    var uniformSetters = {};\n    var re = /uniform.*(vec2|vec3|mat3|mat4|sampler2D|float|int)\\W(\\w*)/g;\n    var match = re.exec(script);\n    while (!!match) {\n      var name = match[2],\n          type = match[1];\n      uniformSetters[name] = settersLookup[type];\n      match = re.exec(script);\n    }\n    return uniformSetters;\n  }\n\n  function getLocations(gl, program, names, type) {\n    var get = {\n      attribute: \"getAttribLocation\",\n      uniform: \"getUniformLocation\"\n    }[type];\n    var locations = {};\n    for (var i = 0; i < names.length; i++) {\n      locations[names[i]] = gl[get](program, names[i]);\n    }\n    return locations;\n  }\n\n  function getProgramLocations(gl, program, scripts) {\n    var script = scripts[0].concat(scripts[1]);\n    var attNames = getAttributeNames(script);\n    var attLocations = getLocations(gl, program, attNames, \"attribute\");\n    var uniNames = getUniformNames(script);\n    var uniLocations = getLocations(gl, program, uniNames, \"uniform\");\n    var uniSetters = getUniformSetters(script);\n    return {\n      attributeLocations: attLocations,\n      uniformLocations: uniLocations,\n      uniformSetters: uniSetters\n    };\n  }\n}();\n\nmodule.exports = GLUtil;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ })
/******/ ]);